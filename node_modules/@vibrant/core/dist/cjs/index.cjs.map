{"version":3,"file":"index.cjs","sources":["../../src/index.ts"],"sourcesContent":["import { buildProcessOptions } from \"./options\";\nimport { Builder } from \"./builder\";\nimport { assignDeep } from \"./utils\";\nimport type { Options } from \"./options\";\nimport type { Image, ImageSource } from \"@vibrant/image\";\n\nimport type { Palette } from \"@vibrant/color\";\n\nimport type { Pipeline, ProcessOptions, ProcessResult } from \"./pipeline\";\n\n/**\n * Main class of `node-vibrant`.\n */\nexport class Vibrant {\n\tprivate _result: ProcessResult | undefined;\n\tprivate static _pipeline: Pipeline;\n\n\tstatic use(pipeline: Pipeline) {\n\t\tthis._pipeline = pipeline;\n\t}\n\n\tstatic DefaultOpts: Partial<Options> = {\n\t\tcolorCount: 64,\n\t\tquality: 5,\n\t\tfilters: [],\n\t};\n\n\tstatic from(src: ImageSource): Builder {\n\t\treturn new Builder(src);\n\t}\n\n\tget result() {\n\t\treturn this._result;\n\t}\n\n\topts: Options;\n\n\t/**\n\t *\n\t * @param _src Path to image file (supports HTTP/HTTPs)\n\t * @param opts Options (optional)\n\t */\n\tconstructor(\n\t\tprivate _src: ImageSource,\n\t\topts?: Partial<Options>,\n\t) {\n\t\tthis.opts = assignDeep({}, Vibrant.DefaultOpts, opts);\n\t}\n\n\tprivate _process(\n\t\timage: Image,\n\t\topts?: Partial<ProcessOptions>,\n\t): Promise<ProcessResult> {\n\t\timage.scaleDown(this.opts);\n\n\t\tconst processOpts = buildProcessOptions(this.opts, opts);\n\n\t\treturn Vibrant._pipeline.process(image.getImageData(), processOpts);\n\t}\n\n\tasync getPalette(): Promise<Palette> {\n\t\tconst image = new this.opts.ImageClass();\n\t\ttry {\n\t\t\tconst image1 = await image.load(this._src);\n\t\t\tconst result1: ProcessResult = await this._process(image1, {\n\t\t\t\tgenerators: [\"default\"],\n\t\t\t});\n\t\t\tthis._result = result1;\n\t\t\tconst res = result1.palettes[\"default\"];\n\t\t\tif (!res) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Something went wrong and a palette was not found, please file a bug against our GitHub repo: https://github.com/vibrant-Colors/node-vibrant/`,\n\t\t\t\t);\n\t\t\t}\n\t\t\timage.remove();\n\t\t\treturn res;\n\t\t} catch (err) {\n\t\t\timage.remove();\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\tasync getPalettes(): Promise<{ [name: string]: Palette }> {\n\t\tconst image = new this.opts.ImageClass();\n\t\ttry {\n\t\t\tconst image1 = await image.load(this._src);\n\t\t\tconst result1: ProcessResult = await this._process(image1, {\n\t\t\t\tgenerators: [\"*\"],\n\t\t\t});\n\t\t\tthis._result = result1;\n\t\t\tconst res: any = result1.palettes;\n\t\t\timage.remove();\n\t\t\treturn res;\n\t\t} catch (err) {\n\t\t\timage.remove();\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n}\n\nexport { BasicPipeline } from \"./pipeline\";\nexport { WorkerPipeline } from \"./pipeline/worker/client\";\nexport { runPipelineInWorker } from \"./pipeline/worker/host\";\nexport { Builder };\n"],"names":["assignDeep","Builder","buildProcessOptions"],"mappings":";;;;;;;;AAaO,MAAM,WAAN,MAAM,SAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6BpB,YACS,MACR,MACC;AAFO,SAAA,OAAA;AAGR,SAAK,OAAOA,MAAW,WAAA,CAAI,GAAA,SAAQ,aAAa,IAAI;AAAA,EAAA;AAAA,EA7BrD,OAAO,IAAI,UAAoB;AAC9B,SAAK,YAAY;AAAA,EAAA;AAAA,EASlB,OAAO,KAAK,KAA2B;AAC/B,WAAA,IAAIC,gBAAQ,GAAG;AAAA,EAAA;AAAA,EAGvB,IAAI,SAAS;AACZ,WAAO,KAAK;AAAA,EAAA;AAAA,EAiBL,SACP,OACA,MACyB;AACnB,UAAA,UAAU,KAAK,IAAI;AAEzB,UAAM,cAAcC,QAAA,oBAAoB,KAAK,MAAM,IAAI;AAEvD,WAAO,SAAQ,UAAU,QAAQ,MAAM,gBAAgB,WAAW;AAAA,EAAA;AAAA,EAGnE,MAAM,aAA+B;AACpC,UAAM,QAAQ,IAAI,KAAK,KAAK,WAAW;AACnC,QAAA;AACH,YAAM,SAAS,MAAM,MAAM,KAAK,KAAK,IAAI;AACzC,YAAM,UAAyB,MAAM,KAAK,SAAS,QAAQ;AAAA,QAC1D,YAAY,CAAC,SAAS;AAAA,MAAA,CACtB;AACD,WAAK,UAAU;AACT,YAAA,MAAM,QAAQ,SAAS,SAAS;AACtC,UAAI,CAAC,KAAK;AACT,cAAM,IAAI;AAAA,UACT;AAAA,QACD;AAAA,MAAA;AAED,YAAM,OAAO;AACN,aAAA;AAAA,aACC,KAAK;AACb,YAAM,OAAO;AACN,aAAA,QAAQ,OAAO,GAAG;AAAA,IAAA;AAAA,EAC1B;AAAA,EAGD,MAAM,cAAoD;AACzD,UAAM,QAAQ,IAAI,KAAK,KAAK,WAAW;AACnC,QAAA;AACH,YAAM,SAAS,MAAM,MAAM,KAAK,KAAK,IAAI;AACzC,YAAM,UAAyB,MAAM,KAAK,SAAS,QAAQ;AAAA,QAC1D,YAAY,CAAC,GAAG;AAAA,MAAA,CAChB;AACD,WAAK,UAAU;AACf,YAAM,MAAW,QAAQ;AACzB,YAAM,OAAO;AACN,aAAA;AAAA,aACC,KAAK;AACb,YAAM,OAAO;AACN,aAAA,QAAQ,OAAO,GAAG;AAAA,IAAA;AAAA,EAC1B;AAEF;AA7EC,SAAO,cAAgC;AAAA,EACtC,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,SAAS,CAAA;AACV;AAZM,IAAM,UAAN;;;;;;"}