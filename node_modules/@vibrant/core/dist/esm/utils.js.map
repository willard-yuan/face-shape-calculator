{"version":3,"file":"utils.js","sources":["../../src/utils.ts"],"sourcesContent":["/**\n * @private\n */\nexport function mapValues<T, R>(\n\to: { [key: string]: T },\n\tmapper: (v: T) => R,\n): { [key: string]: R } {\n\tconst result: { [key: string]: R } = {};\n\n\tfor (const key in o) {\n\t\tif (o.hasOwnProperty(key)) {\n\t\t\tconst v = o[key];\n\t\t\tif (!v) continue;\n\t\t\tresult[key] = mapper(v);\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * @private\n * Overwrite values or properties on objects and lists recursively.\n * A shallow copy will be created for each array value.\n */\nexport function assignDeep<T>(\n\ttarget: Partial<T>,\n\t...sources: (Partial<T> | undefined)[]\n): T {\n\tsources.forEach((s) => {\n\t\tif (!s) return;\n\t\tfor (const key in s) {\n\t\t\tif (s.hasOwnProperty(key)) {\n\t\t\t\tconst v = s[key] as any;\n\t\t\t\tif (Array.isArray(v)) {\n\t\t\t\t\t// Shallow copy\n\t\t\t\t\ttarget[key] = v.slice(0) as any;\n\t\t\t\t} else if (typeof v === \"object\") {\n\t\t\t\t\tif (!target[key]) target[key] = {} as any;\n\t\t\t\t\tassignDeep<any>(target[key] as any, v);\n\t\t\t\t} else {\n\t\t\t\t\ttarget[key] = v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\treturn target as T;\n}\n"],"names":[],"mappings":"AAGgB,SAAA,UACf,GACA,QACuB;AACvB,QAAM,SAA+B,CAAC;AAEtC,aAAW,OAAO,GAAG;AAChB,QAAA,EAAE,eAAe,GAAG,GAAG;AACpB,YAAA,IAAI,EAAE,GAAG;AACf,UAAI,CAAC,EAAG;AACD,aAAA,GAAG,IAAI,OAAO,CAAC;AAAA,IAAA;AAAA,EACvB;AAGM,SAAA;AACR;AAOgB,SAAA,WACf,WACG,SACC;AACI,UAAA,QAAQ,CAAC,MAAM;AACtB,QAAI,CAAC,EAAG;AACR,eAAW,OAAO,GAAG;AAChB,UAAA,EAAE,eAAe,GAAG,GAAG;AACpB,cAAA,IAAI,EAAE,GAAG;AACX,YAAA,MAAM,QAAQ,CAAC,GAAG;AAErB,iBAAO,GAAG,IAAI,EAAE,MAAM,CAAC;AAAA,QAAA,WACb,OAAO,MAAM,UAAU;AACjC,cAAI,CAAC,OAAO,GAAG,EAAU,QAAA,GAAG,IAAI,CAAC;AACjB,qBAAA,OAAO,GAAG,GAAU,CAAC;AAAA,QAAA,OAC/B;AACN,iBAAO,GAAG,IAAI;AAAA,QAAA;AAAA,MACf;AAAA,IACD;AAAA,EACD,CACA;AACM,SAAA;AACR;"}