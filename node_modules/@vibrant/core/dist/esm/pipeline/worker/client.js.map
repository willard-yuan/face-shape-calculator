{"version":3,"file":"client.js","sources":["../../../../src/pipeline/worker/client.ts"],"sourcesContent":["import { WorkerManager } from \"@vibrant/worker\";\nimport { Swatch } from \"@vibrant/color\";\nimport { mapValues } from \"../../utils\";\nimport type { TaskWorkerClass } from \"@vibrant/worker\";\nimport type { Palette } from \"@vibrant/color\";\nimport type { Pipeline, ProcessOptions, ProcessResult } from \"../index\";\n\n/**\n * @private\n * Client side (runs in UI thread)\n */\nexport class WorkerPipeline implements Pipeline {\n\tprivate _manager = new WorkerManager();\n\n\tconstructor(protected PipelineWorker: TaskWorkerClass) {\n\t\tthis._manager.register(\"pipeline\", PipelineWorker);\n\t}\n\n\tprivate _rehydrate(result: ProcessResult) {\n\t\tconst { colors, palettes } = result;\n\t\tresult.colors = colors.map((s) => Swatch.clone(s));\n\n\t\tresult.palettes = mapValues(\n\t\t\tpalettes,\n\t\t\t(p) => mapValues(p, (c) => (c ? Swatch.clone(c) : null)) as Palette,\n\t\t);\n\t\treturn result;\n\t}\n\n\tasync process(\n\t\timageData: ImageData,\n\t\topts: ProcessOptions,\n\t): Promise<ProcessResult> {\n\t\tconst result = await this._manager.invokeWorker(\n\t\t\t\"pipeline\",\n\t\t\t[imageData, opts],\n\t\t\t[imageData.data.buffer],\n\t\t);\n\t\treturn this._rehydrate(result as ProcessResult);\n\t}\n}\n"],"names":[],"mappings":";;;AAWO,MAAM,eAAmC;AAAA,EAG/C,YAAsB,gBAAiC;AAAjC,SAAA,iBAAA;AAFd,SAAA,WAAW,IAAI,cAAc;AAG/B,SAAA,SAAS,SAAS,YAAY,cAAc;AAAA,EAAA;AAAA,EAG1C,WAAW,QAAuB;AACnC,UAAA,EAAE,QAAQ,SAAA,IAAa;AACtB,WAAA,SAAS,OAAO,IAAI,CAAC,MAAM,OAAO,MAAM,CAAC,CAAC;AAEjD,WAAO,WAAW;AAAA,MACjB;AAAA,MACA,CAAC,MAAM,UAAU,GAAG,CAAC,MAAO,IAAI,OAAO,MAAM,CAAC,IAAI,IAAK;AAAA,IACxD;AACO,WAAA;AAAA,EAAA;AAAA,EAGR,MAAM,QACL,WACA,MACyB;AACnB,UAAA,SAAS,MAAM,KAAK,SAAS;AAAA,MAClC;AAAA,MACA,CAAC,WAAW,IAAI;AAAA,MAChB,CAAC,UAAU,KAAK,MAAM;AAAA,IACvB;AACO,WAAA,KAAK,WAAW,MAAuB;AAAA,EAAA;AAEhD;"}