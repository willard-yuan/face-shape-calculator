{"version":3,"file":"vbox.js","sources":["../../src/vbox.ts"],"sourcesContent":["import { Filter } from \"@vibrant/color\";\nimport { Histogram } from \"@vibrant/image\";\nimport type { Vec3 } from \"@vibrant/color\";\nimport type { Pixels } from \"@vibrant/image\";\n\ninterface Dimension {\n\tr1: number;\n\tr2: number;\n\tg1: number;\n\tg2: number;\n\tb1: number;\n\tb2: number;\n\t[d: string]: number;\n}\n\nconst SIGBITS = 5;\nconst RSHIFT = 8 - SIGBITS;\n\n/**\n * @private\n */\nexport class VBox {\n\tstatic build(pixels: Pixels): VBox {\n\t\tconst h = new Histogram(pixels, { sigBits: SIGBITS });\n\t\tconst { rmin, rmax, gmin, gmax, bmin, bmax } = h;\n\t\treturn new VBox(rmin, rmax, gmin, gmax, bmin, bmax, h);\n\t}\n\n\tdimension: Dimension;\n\n\tprivate _volume = -1;\n\tprivate _avg: Vec3 | null = null;\n\tprivate _count = -1;\n\n\tconstructor(\n\t\tr1: number,\n\t\tr2: number,\n\t\tg1: number,\n\t\tg2: number,\n\t\tb1: number,\n\t\tb2: number,\n\t\tpublic histogram: Histogram,\n\t) {\n\t\t// NOTE: dimension will be mutated by split operation.\n\t\t//       It must be specified explicitly, not from histogram\n\t\tthis.dimension = { r1, r2, g1, g2, b1, b2 };\n\t}\n\n\tinvalidate(): void {\n\t\tthis._volume = this._count = -1;\n\t\tthis._avg = null;\n\t}\n\n\tvolume(): number {\n\t\tif (this._volume < 0) {\n\t\t\tconst { r1, r2, g1, g2, b1, b2 } = this.dimension;\n\t\t\tthis._volume = (r2 - r1 + 1) * (g2 - g1 + 1) * (b2 - b1 + 1);\n\t\t}\n\t\treturn this._volume;\n\t}\n\n\tcount(): number {\n\t\tif (this._count < 0) {\n\t\t\tconst { hist, getColorIndex } = this.histogram;\n\t\t\tconst { r1, r2, g1, g2, b1, b2 } = this.dimension;\n\t\t\tlet c = 0;\n\n\t\t\tfor (let r = r1; r <= r2; r++) {\n\t\t\t\tfor (let g = g1; g <= g2; g++) {\n\t\t\t\t\tfor (let b = b1; b <= b2; b++) {\n\t\t\t\t\t\tconst index = getColorIndex(r, g, b);\n\t\t\t\t\t\tif (!hist[index]) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tc += hist[index]!;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._count = c;\n\t\t}\n\t\treturn this._count;\n\t}\n\n\tclone(): VBox {\n\t\tconst { histogram } = this;\n\t\tconst { r1, r2, g1, g2, b1, b2 } = this.dimension;\n\t\treturn new VBox(r1, r2, g1, g2, b1, b2, histogram);\n\t}\n\n\tavg(): Vec3 {\n\t\tif (!this._avg) {\n\t\t\tconst { hist, getColorIndex } = this.histogram;\n\t\t\tconst { r1, r2, g1, g2, b1, b2 } = this.dimension;\n\t\t\tlet ntot = 0;\n\t\t\tconst mult = 1 << (8 - SIGBITS);\n\t\t\tlet rsum: number;\n\t\t\tlet gsum: number;\n\t\t\tlet bsum: number;\n\t\t\trsum = gsum = bsum = 0;\n\n\t\t\tfor (let r = r1; r <= r2; r++) {\n\t\t\t\tfor (let g = g1; g <= g2; g++) {\n\t\t\t\t\tfor (let b = b1; b <= b2; b++) {\n\t\t\t\t\t\tconst index = getColorIndex(r, g, b);\n\t\t\t\t\t\tconst h = hist[index];\n\t\t\t\t\t\tif (!h) continue;\n\t\t\t\t\t\tntot += h;\n\t\t\t\t\t\trsum += h * (r + 0.5) * mult;\n\t\t\t\t\t\tgsum += h * (g + 0.5) * mult;\n\t\t\t\t\t\tbsum += h * (b + 0.5) * mult;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ntot) {\n\t\t\t\tthis._avg = [~~(rsum / ntot), ~~(gsum / ntot), ~~(bsum / ntot)];\n\t\t\t} else {\n\t\t\t\tthis._avg = [\n\t\t\t\t\t~~((mult * (r1 + r2 + 1)) / 2),\n\t\t\t\t\t~~((mult * (g1 + g2 + 1)) / 2),\n\t\t\t\t\t~~((mult * (b1 + b2 + 1)) / 2),\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\t\treturn this._avg;\n\t}\n\n\tcontains(rgb: Vec3): boolean {\n\t\tlet [r, g, b] = rgb;\n\t\tconst { r1, r2, g1, g2, b1, b2 } = this.dimension;\n\t\tr >>= RSHIFT;\n\t\tg >>= RSHIFT;\n\t\tb >>= RSHIFT;\n\n\t\treturn r >= r1 && r <= r2 && g >= g1 && g <= g2 && b >= b1 && b <= b2;\n\t}\n\n\tsplit(): VBox[] {\n\t\tconst { hist, getColorIndex } = this.histogram;\n\t\tconst { r1, r2, g1, g2, b1, b2 } = this.dimension;\n\t\tconst count = this.count();\n\t\tif (!count) return [];\n\t\tif (count === 1) return [this.clone()];\n\t\tconst rw = r2 - r1 + 1;\n\t\tconst gw = g2 - g1 + 1;\n\t\tconst bw = b2 - b1 + 1;\n\n\t\tconst maxw = Math.max(rw, gw, bw);\n\t\tlet accSum: Uint32Array | null = null;\n\t\tlet sum: number;\n\t\tlet total: number;\n\t\tsum = total = 0;\n\n\t\tlet maxd: \"r\" | \"g\" | \"b\" | null = null;\n\n\t\tif (maxw === rw) {\n\t\t\tmaxd = \"r\";\n\t\t\taccSum = new Uint32Array(r2 + 1);\n\t\t\tfor (let r = r1; r <= r2; r++) {\n\t\t\t\tsum = 0;\n\t\t\t\tfor (let g = g1; g <= g2; g++) {\n\t\t\t\t\tfor (let b = b1; b <= b2; b++) {\n\t\t\t\t\t\tconst index = getColorIndex(r, g, b);\n\t\t\t\t\t\tif (!hist[index]) continue;\n\t\t\t\t\t\tsum += hist[index]!;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttotal += sum;\n\t\t\t\taccSum[r] = total;\n\t\t\t}\n\t\t} else if (maxw === gw) {\n\t\t\tmaxd = \"g\";\n\t\t\taccSum = new Uint32Array(g2 + 1);\n\t\t\tfor (let g = g1; g <= g2; g++) {\n\t\t\t\tsum = 0;\n\t\t\t\tfor (let r = r1; r <= r2; r++) {\n\t\t\t\t\tfor (let b = b1; b <= b2; b++) {\n\t\t\t\t\t\tconst index = getColorIndex(r, g, b);\n\t\t\t\t\t\tif (!hist[index]) continue;\n\t\t\t\t\t\tsum += hist[index]!;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttotal += sum;\n\t\t\t\taccSum[g] = total;\n\t\t\t}\n\t\t} else {\n\t\t\tmaxd = \"b\";\n\t\t\taccSum = new Uint32Array(b2 + 1);\n\t\t\tfor (let b = b1; b <= b2; b++) {\n\t\t\t\tsum = 0;\n\t\t\t\tfor (let r = r1; r <= r2; r++) {\n\t\t\t\t\tfor (let g = g1; g <= g2; g++) {\n\t\t\t\t\t\tconst index = getColorIndex(r, g, b);\n\t\t\t\t\t\tif (!hist[index]) continue;\n\t\t\t\t\t\tsum += hist[index]!;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttotal += sum;\n\t\t\t\taccSum[b] = total;\n\t\t\t}\n\t\t}\n\n\t\tlet splitPoint = -1;\n\t\tconst reverseSum = new Uint32Array(accSum.length);\n\t\tfor (let i = 0; i < accSum.length; i++) {\n\t\t\tconst d = accSum[i];\n\t\t\tif (!d) continue;\n\t\t\tif (splitPoint < 0 && d > total / 2) splitPoint = i;\n\t\t\treverseSum[i] = total - d;\n\t\t}\n\n\t\tconst vbox = this;\n\n\t\tfunction doCut(d: string): VBox[] {\n\t\t\tconst dim1 = d + \"1\";\n\t\t\tconst dim2 = d + \"2\";\n\t\t\tconst d1 = vbox.dimension[dim1]!;\n\t\t\tlet d2 = vbox.dimension[dim2]!;\n\t\t\tconst vbox1 = vbox.clone();\n\t\t\tconst vbox2 = vbox.clone();\n\t\t\tconst left = splitPoint - d1;\n\t\t\tconst right = d2 - splitPoint;\n\n\t\t\tif (left <= right) {\n\t\t\t\td2 = Math.min(d2 - 1, ~~(splitPoint + right / 2));\n\t\t\t\td2 = Math.max(0, d2);\n\t\t\t} else {\n\t\t\t\td2 = Math.max(d1, ~~(splitPoint - 1 - left / 2));\n\t\t\t\td2 = Math.min(vbox.dimension[dim2]!, d2);\n\t\t\t}\n\n\t\t\twhile (!accSum![d2]) d2++;\n\n\t\t\tlet c2 = reverseSum[d2];\n\t\t\twhile (!c2 && accSum![d2 - 1]) c2 = reverseSum[--d2];\n\n\t\t\tvbox1.dimension[dim2] = d2;\n\t\t\tvbox2.dimension[dim1] = d2 + 1;\n\n\t\t\treturn [vbox1, vbox2];\n\t\t}\n\n\t\treturn doCut(maxd);\n\t}\n}\n"],"names":[],"mappings":"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"}