{"version":3,"file":"session-props.js","sourceRoot":"","sources":["../../src/session-props.ts"],"names":[],"mappings":"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","sourcesContent":["/* Store some session-level attribution-related properties in the persistence layer\n *\n * These have the same lifespan as a session_id, meaning that if the session_id changes, these properties will be reset.\n *\n * We only store the entry URL and referrer, and derive many props (such as utm tags) from those.\n *\n * Given that the cookie is limited to 4K bytes, we don't want to store too much data, so we chose not to store device\n * properties (such as browser, OS, etc) here, as usually getting the current value of those from event properties is\n * sufficient.\n */\nimport { Info } from './utils/event-utils'\nimport type { SessionIdManager } from './sessionid'\nimport type { PostHogPersistence } from './posthog-persistence'\nimport { CLIENT_SESSION_PROPS } from './constants'\nimport type { PostHog } from './posthog-core'\nimport { each, stripEmptyProperties } from './utils'\nimport { stripLeadingDollar } from './utils/string-utils'\n\ninterface LegacySessionSourceProps {\n    initialPathName: string\n    referringDomain: string // Is actually referring host, but named referring domain for internal consistency. Should contain a port if there is one.\n    utm_medium?: string\n    utm_source?: string\n    utm_campaign?: string\n    utm_content?: string\n    utm_term?: string\n}\n\ninterface CurrentSessionSourceProps {\n    r: string // Referring host\n    u: string | undefined // full URL\n}\n\ninterface StoredSessionSourceProps {\n    sessionId: string\n    props: LegacySessionSourceProps | CurrentSessionSourceProps\n}\n\nconst generateSessionSourceParams = (posthog?: PostHog): LegacySessionSourceProps | CurrentSessionSourceProps => {\n    return Info.personInfo({\n        maskPersonalDataProperties: posthog?.config.mask_personal_data_properties,\n        customPersonalDataProperties: posthog?.config.custom_personal_data_properties,\n    })\n}\n\nexport class SessionPropsManager {\n    private readonly instance: PostHog\n    private readonly _sessionIdManager: SessionIdManager\n    private readonly _persistence: PostHogPersistence\n    private readonly _sessionSourceParamGenerator: (\n        instance?: PostHog\n    ) => LegacySessionSourceProps | CurrentSessionSourceProps\n\n    constructor(\n        instance: PostHog,\n        sessionIdManager: SessionIdManager,\n        persistence: PostHogPersistence,\n        sessionSourceParamGenerator?: (instance?: PostHog) => LegacySessionSourceProps | CurrentSessionSourceProps\n    ) {\n        this.instance = instance\n        this._sessionIdManager = sessionIdManager\n        this._persistence = persistence\n        this._sessionSourceParamGenerator = sessionSourceParamGenerator || generateSessionSourceParams\n\n        this._sessionIdManager.onSessionId(this._onSessionIdCallback)\n    }\n\n    _getStored(): StoredSessionSourceProps | undefined {\n        return this._persistence.props[CLIENT_SESSION_PROPS]\n    }\n\n    _onSessionIdCallback = (sessionId: string) => {\n        const stored = this._getStored()\n        if (stored && stored.sessionId === sessionId) {\n            return\n        }\n\n        const newProps: StoredSessionSourceProps = {\n            sessionId,\n            props: this._sessionSourceParamGenerator(this.instance),\n        }\n        this._persistence.register({ [CLIENT_SESSION_PROPS]: newProps })\n    }\n\n    getSetOnceProps() {\n        const p = this._getStored()?.props\n        if (!p) {\n            return {}\n        }\n        if ('r' in p) {\n            return Info.personPropsFromInfo(p)\n        } else {\n            return {\n                $referring_domain: p.referringDomain,\n                $pathname: p.initialPathName,\n                utm_source: p.utm_source,\n                utm_campaign: p.utm_campaign,\n                utm_medium: p.utm_medium,\n                utm_content: p.utm_content,\n                utm_term: p.utm_term,\n            }\n        }\n    }\n\n    getSessionProps() {\n        // it's the same props, but don't include null for unset properties, and add a prefix\n        const p: Record<string, any> = {}\n        each(stripEmptyProperties(this.getSetOnceProps()), (v, k) => {\n            if (k === '$current_url') {\n                // $session_entry_current_url would be a weird name, call it $session_entry_url instead\n                k = 'url'\n            }\n            p[`$session_entry_${stripLeadingDollar(k)}`] = v\n        })\n        return p\n    }\n}\n"]}