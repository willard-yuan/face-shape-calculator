{"version":3,"file":"number-utils.js","sourceRoot":"","sources":["../../../src/utils/number-utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAA;AACvC,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAA;AAEjC;;;;;;;GAOG;AACH,MAAM,UAAU,YAAY,CAAC,KAAc,EAAE,GAAW,EAAE,GAAW,EAAE,KAAc,EAAE,aAAsB;IACzG,IAAI,GAAG,GAAG,GAAG,EAAE,CAAC;QACZ,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAA;QAC9C,GAAG,GAAG,GAAG,CAAA;IACb,CAAC;IAED,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;QACnB,KAAK;YACD,MAAM,CAAC,IAAI,CACP,KAAK,GAAG,iDAAiD,GAAG,GAAG,GAAG,cAAc,GAAG,aAAa,CACnG,CAAA;QACL,OAAO,YAAY,CAAC,aAAa,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,CAAA;IAC9D,CAAC;SAAM,IAAI,KAAK,GAAG,GAAG,EAAE,CAAC;QACrB,KAAK,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,gCAAgC,GAAG,GAAG,GAAG,4BAA4B,CAAC,CAAA;QACnG,OAAO,GAAG,CAAA;IACd,CAAC;SAAM,IAAI,KAAK,GAAG,GAAG,EAAE,CAAC;QACrB,KAAK,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,4BAA4B,GAAG,GAAG,GAAG,4BAA4B,CAAC,CAAA;QAC/F,OAAO,GAAG,CAAA;IACd,CAAC;SAAM,CAAC;QACJ,OAAO,KAAK,CAAA;IAChB,CAAC;AACL,CAAC","sourcesContent":["import { isNumber } from './type-utils'\nimport { logger } from './logger'\n\n/**\n * Clamps a value to a range.\n * @param value the value to clamp\n * @param min the minimum value\n * @param max the maximum value\n * @param label if provided then enables logging and prefixes all logs with labels\n * @param fallbackValue if provided then returns this value if the value is not a valid number\n */\nexport function clampToRange(value: unknown, min: number, max: number, label?: string, fallbackValue?: number): number {\n    if (min > max) {\n        logger.warn('min cannot be greater than max.')\n        min = max\n    }\n\n    if (!isNumber(value)) {\n        label &&\n            logger.warn(\n                label + ' must be a number. using max or fallback. max: ' + max + ', fallback: ' + fallbackValue\n            )\n        return clampToRange(fallbackValue || max, min, max, label)\n    } else if (value > max) {\n        label && logger.warn(label + ' cannot be  greater than max: ' + max + '. Using max value instead.')\n        return max\n    } else if (value < min) {\n        label && logger.warn(label + ' cannot be less than min: ' + min + '. Using min value instead.')\n        return min\n    } else {\n        return value\n    }\n}\n"]}