{"version":3,"file":"posthog-featureflags.js","sourceRoot":"","sources":["../../src/posthog-featureflags.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAA;AAEzC,OAAO,EAOH,WAAW,GAId,MAAM,SAAS,CAAA;AAGhB,OAAO,EACH,iCAAiC,EACjC,qBAAqB,EACrB,2BAA2B,EAC3B,4BAA4B,EAC5B,kBAAkB,GACrB,MAAM,aAAa,CAAA;AAEpB,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAA;AAC5C,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAA;AAE7C,IAAM,MAAM,GAAG,YAAY,CAAC,gBAAgB,CAAC,CAAA;AAE7C,IAAM,gCAAgC,GAAG,uBAAuB,CAAA;AAChE,IAAM,kCAAkC,GAAG,yBAAyB,CAAA;AACpE,IAAM,iCAAiC,GAAG,wBAAwB,CAAA;AAClE,IAAM,0CAA0C,GAAG,iCAAiC,CAAA;AACpF,IAAM,mCAAmC,GAAG,0BAA0B,CAAA;AAEtE,MAAM,CAAC,IAAM,wBAAwB,GAAG,UAAC,YAA+C;;IACpF,IAAM,kBAAkB,GAAqC,EAAE,CAAA;;QAC/D,KAA2B,IAAA,KAAA,SAAA,OAAO,CAAC,YAAY,IAAI,EAAE,CAAC,CAAA,gBAAA,4BAAE,CAAC;YAA9C,IAAA,KAAA,mBAAY,EAAX,GAAG,QAAA,EAAE,KAAK,QAAA;YAClB,IAAI,KAAK,EAAE,CAAC;gBACR,kBAAkB,CAAC,GAAG,CAAC,GAAG,KAAK,CAAA;YACnC,CAAC;QACL,CAAC;;;;;;;;;IACD,OAAO,kBAAkB,CAAA;AAC7B,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,8BAA8B,GAAG,UAC1C,QAAiC,EACjC,WAA+B,EAC/B,YAAmD,EACnD,mBAAkD;;IADlD,6BAAA,EAAA,iBAAmD;IACnD,oCAAA,EAAA,wBAAkD;IAElD,IAAM,KAAK,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAA;IACtC,IAAM,YAAY,GAAG,QAAQ,CAAC,qBAAqB,CAAC,CAAA;IACpD,IAAM,SAAS,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAA;IACvC,IAAI,CAAC,KAAK,EAAE,CAAC;QACT,OAAM;IACV,CAAC;IACD,mBAAmB;IACnB,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;QACjB,IAAM,sBAAsB,GAA4B,EAAE,CAAA;QAC1D,IAAI,KAAK,EAAE,CAAC;YACR,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACpC,sBAAsB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;YAC3C,CAAC;QACL,CAAC;QACD,WAAW;YACP,WAAW,CAAC,QAAQ;gBAChB,GAAC,gCAAgC,IAAG,KAAK;gBACzC,GAAC,qBAAqB,IAAG,sBAAsB;oBACjD,CAAA;QACN,OAAM;IACV,CAAC;IAED,oBAAoB;IACpB,IAAI,eAAe,GAAG,KAAK,CAAA;IAC3B,IAAI,sBAAsB,GAAG,YAAY,CAAA;IACzC,IAAI,QAAQ,CAAC,yBAAyB,EAAE,CAAC;QACrC,4EAA4E;QAC5E,eAAe,yBAAQ,YAAY,GAAK,eAAe,CAAE,CAAA;QACzD,sBAAsB,yBAAQ,mBAAmB,GAAK,sBAAsB,CAAE,CAAA;IAClF,CAAC;IACD,WAAW;QACP,WAAW,CAAC,QAAQ,uBACf,gCAAgC,IAAG,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC,CAAC,KACzF,qBAAqB,IAAG,eAAe,IAAI,EAAE,KAC7C,iCAAiC,IAAG,sBAAsB,IAAI,EAAE,OAC9D,CAAC,SAAS,CAAC,CAAC,WAAG,GAAC,mCAAmC,IAAG,SAAS,MAAG,CAAC,CAAC,EAAE,CAAC,EAC5E,CAAA;AACV,CAAC,CAAA;AAsBD,MAAM,CAAN,IAAY,oBAGX;AAHD,WAAY,oBAAoB;IAC5B,sDAA8B,CAAA;IAC9B,iDAAyB,CAAA;AAC7B,CAAC,EAHW,oBAAoB,KAApB,oBAAoB,QAG/B;AAED;IAYI,6BAAoB,QAAiB;QAAjB,aAAQ,GAAR,QAAQ,CAAS;QAXrC,sBAAiB,GAAY,KAAK,CAAA;QAG1B,oBAAe,GAAY,KAAK,CAAA;QAChC,qBAAgB,GAAY,KAAK,CAAA;QACjC,uBAAkB,GAAY,KAAK,CAAA;QACnC,+BAA0B,GAAY,KAAK,CAAA;QAE3C,kBAAa,GAAY,KAAK,CAAA;QAC9B,2BAAsB,GAAY,KAAK,CAAA;QAG3C,IAAI,CAAC,wBAAwB,GAAG,EAAE,CAAA;IACtC,CAAC;IAED,oCAAM,GAAN;QACI,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,uBAAuB,EAAE,CAAC;YAC/C,yGAAyG;YACzG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAA;YACzB,OAAM;QACV,CAAC;QAED,+HAA+H;QAC/H,IAAM,YAAY,GACd,CAAC,IAAI,CAAC,gBAAgB;YACtB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,8BAA8B;gBAChD,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,4CAA4C,CAAC,CAAA;QAE1E,IAAI,CAAC,mBAAmB,CAAC;YACrB,YAAY,cAAA;SACf,CAAC,CAAA;IACN,CAAC;IAED,sBAAI,+CAAc;aAAlB;YACI,OAAO,IAAI,CAAC,eAAe,CAAA;QAC/B,CAAC;;;OAAA;IAED,sCAAQ,GAAR;QACI,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAA;IAC9C,CAAC;IAED,6CAAe,GAAf;QACI,IAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAA;QACtE,IAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,kCAAkC,CAAC,CAAA;QACtF,IAAI,CAAC,eAAe,EAAE,CAAC;YACnB,OAAO,YAAY,IAAI,EAAE,CAAA;QAC7B,CAAC;QAED,IAAM,UAAU,GAAG,MAAM,CAAC,EAAE,EAAE,YAAY,CAAC,CAAA;QAC3C,IAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;QACnD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC7C,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAA;QACtE,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC1B,MAAM,CAAC,IAAI,CAAC,4BAA4B,EAAE;gBACtC,YAAY,cAAA;gBACZ,eAAe,iBAAA;gBACf,UAAU,YAAA;aACb,CAAC,CAAA;YACF,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAA;QACjC,CAAC;QACD,OAAO,UAAU,CAAA;IACrB,CAAC;IAED,6CAAe,GAAf;QACI,IAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,iCAAiC,CAAC,CAAA;QAClF,IAAM,kBAAkB,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,0CAA0C,CAAC,CAAA;QAEjG,IAAI,CAAC,kBAAkB,EAAE,CAAC;YACtB,OAAO,YAAY,IAAI,EAAE,CAAA;QAC7B,CAAC;QAED,IAAM,aAAa,GAAG,MAAM,CAAC,EAAE,EAAE,YAAY,IAAI,EAAE,CAAC,CAAA;QACpD,IAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;QACtD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC7C,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,kBAAkB,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAA;QAC5E,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC1B,MAAM,CAAC,IAAI,CAAC,oCAAoC,EAAE;gBAC9C,YAAY,cAAA;gBACZ,kBAAkB,oBAAA;gBAClB,aAAa,eAAA;aAChB,CAAC,CAAA;YACF,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAA;QACjC,CAAC;QACD,OAAO,aAAa,CAAA;IACxB,CAAC;IAED;;;;;;;OAOG;IACH,gDAAkB,GAAlB;QAAA,iBAgBC;QAfG,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,8BAA8B,EAAE,CAAC;YACjF,8EAA8E;YAC9E,mCAAmC;YACnC,OAAM;QACV,CAAC;QAED,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,mEAAmE;YACnE,OAAM;QACV,CAAC;QAED,2CAA2C;QAC3C,IAAI,CAAC,gBAAgB,GAAG,UAAU,CAAC;YAC/B,KAAI,CAAC,mBAAmB,EAAE,CAAA;QAC9B,CAAC,EAAE,CAAC,CAAC,CAAA;IACT,CAAC;IAEO,4CAAc,GAAtB;QACI,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;QACnC,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAA;IACrC,CAAC;IAED,+CAAiB,GAAjB;QACI,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACzE,+EAA+E;YAC/E,OAAM;QACV,CAAC;QAED,IAAI,CAAC,kBAAkB,EAAE,CAAA;IAC7B,CAAC;IAED,oDAAsB,GAAtB,UAAuB,gBAAwB;QAC3C,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAA;IAC7C,CAAC;IAED,gDAAkB,GAAlB,UAAmB,QAAiB;QAChC,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAA;IACtC,CAAC;IAED;;;OAGG;IACH,iDAAmB,GAAnB,UAAoB,OAAoC;QAAxD,iBA+EC;;QA9EG,qDAAqD;QACrD,IAAI,CAAC,cAAc,EAAE,CAAA;QACrB,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,uBAAuB,EAAE,CAAC;YAC/C,6FAA6F;YAC7F,OAAM;QACV,CAAC;QACD,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAA;YACtC,OAAM;QACV,CAAC;QACD,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAA;QACxC,IAAM,IAAI,GAAwB;YAC9B,KAAK,EAAE,KAAK;YACZ,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE;YAC5C,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;YACjC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,iBAAiB,wBACV,CAAC,CAAA,MAAA,IAAI,CAAC,QAAQ,CAAC,WAAW,0CAAE,iBAAiB,EAAE,KAAI,EAAE,CAAC,GACtD,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,4BAA4B,CAAC,IAAI,EAAE,CAAC,CACtE;YACD,gBAAgB,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,2BAA2B,CAAC;SAC5E,CAAA;QAED,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,YAAY,KAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,8BAA8B,EAAE,CAAC;YAC/E,IAAI,CAAC,aAAa,GAAG,IAAI,CAAA;QAC7B,CAAC;QAED,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAA;QAC5B,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;YACxB,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,EAAE,cAAc,CAAC;YACnE,IAAI,MAAA;YACJ,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM;YACtF,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,+BAA+B;YAC7D,QAAQ,EAAE,UAAC,QAAQ;;gBACf,IAAI,aAAa,GAAG,IAAI,CAAA;gBAExB,IAAI,QAAQ,CAAC,UAAU,KAAK,GAAG,EAAE,CAAC;oBAC9B,qBAAqB;oBACrB,iEAAiE;oBACjE,mBAAmB;oBACnB,IAAI,CAAC,KAAI,CAAC,0BAA0B,EAAE,CAAC;wBACnC,KAAI,CAAC,iBAAiB,GAAG,SAAS,CAAA;oBACtC,CAAC;oBACD,aAAa,GAAG,KAAK,CAAA;gBACzB,CAAC;gBAED,KAAI,CAAC,gBAAgB,GAAG,KAAK,CAAA;gBAE7B,IAAI,CAAC,KAAI,CAAC,aAAa,EAAE,CAAC;oBACtB,KAAI,CAAC,aAAa,GAAG,IAAI,CAAA;oBACzB,KAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAA,QAAQ,CAAC,IAAI,mCAAI,EAAE,CAAC,CAAA;gBACtD,CAAC;gBAED,IAAI,IAAI,CAAC,aAAa,IAAI,CAAC,KAAI,CAAC,0BAA0B,EAAE,CAAC;oBACzD,8GAA8G;oBAC9G,6CAA6C;oBAC7C,OAAM;gBACV,CAAC;gBAED,KAAI,CAAC,sBAAsB,GAAG,CAAC,aAAa,CAAA;gBAE5C,IAAI,QAAQ,CAAC,IAAI,KAAI,MAAA,QAAQ,CAAC,IAAI,CAAC,YAAY,0CAAE,QAAQ,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAA,EAAE,CAAC;oBAC3F,sCAAsC;oBACtC,MAAM,CAAC,IAAI,CACP,+LAA+L,CAClM,CAAA;oBACD,OAAM;gBACV,CAAC;gBAED,KAAI,CAAC,oBAAoB,CAAC,MAAA,QAAQ,CAAC,IAAI,mCAAI,EAAE,EAAE,aAAa,CAAC,CAAA;gBAE7D,IAAI,KAAI,CAAC,0BAA0B,EAAE,CAAC;oBAClC,KAAI,CAAC,0BAA0B,GAAG,KAAK,CAAA;oBACvC,KAAI,CAAC,mBAAmB,EAAE,CAAA;gBAC9B,CAAC;YACL,CAAC;SACJ,CAAC,CAAA;IACN,CAAC;IAED;;;;;;;;;OASG;IACH,4CAAc,GAAd,UAAe,GAAW,EAAE,OAAsC;;;QAAtC,wBAAA,EAAA,YAAsC;QAC9D,IAAI,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC;YAC5E,MAAM,CAAC,IAAI,CAAC,0BAA0B,GAAG,GAAG,GAAG,+CAA+C,CAAC,CAAA;YAC/F,OAAO,SAAS,CAAA;QACpB,CAAC;QACD,IAAM,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,GAAG,CAAC,CAAA;QAC7C,IAAM,eAAe,GAAG,UAAG,SAAS,CAAE,CAAA;QACtC,IAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,mCAAmC,CAAC,IAAI,SAAS,CAAA;QAC9F,IAAM,gBAAgB,GAA6B,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAA;QAEvG,IAAI,OAAO,CAAC,UAAU,IAAI,CAAC,CAAC,YAAY,IAAI,OAAO,CAAC,EAAE,CAAC;YACnD,IAAI,CAAC,CAAC,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,CAAC;gBACjF,IAAI,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;oBACjC,gBAAgB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;gBAC/C,CAAC;qBAAM,CAAC;oBACJ,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;gBAC7C,CAAC;gBACD,MAAA,IAAI,CAAC,QAAQ,CAAC,WAAW,0CAAE,QAAQ,WAAG,GAAC,kBAAkB,IAAG,gBAAgB,MAAG,CAAA;gBAE/E,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,sBAAsB,EAAE;oBAC1C,aAAa,EAAE,GAAG;oBAClB,sBAAsB,EAAE,SAAS;oBACjC,qBAAqB,EAAE,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,IAAI,IAAI;oBAC9D,wBAAwB,EAAE,SAAS;oBACnC,mCAAmC,EAAE,CAAA,MAAA,MAAA,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,0CAAE,YAAY,0CAAG,GAAG,CAAC,KAAI,IAAI;oBAChG,kCAAkC,EAC9B,CAAA,MAAA,MAAA,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,0CAAE,mBAAmB,0CAAG,GAAG,CAAC,KAAI,IAAI;oBACtE,4GAA4G;oBAC5G,qBAAqB,EAAE,CAAC,IAAI,CAAC,sBAAsB;iBACtD,CAAC,CAAA;YACN,CAAC;QACL,CAAC;QACD,OAAO,SAAS,CAAA;IACpB,CAAC;IAED,mDAAqB,GAArB,UAAsB,GAAW;QAC7B,IAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,EAAE,CAAA;QACvC,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAA;IACxB,CAAC;IAED;;;;;;;;;;;;;OAaG;IACH,oDAAsB,GAAtB,UAAuB,GAAW,EAAE,QAAyC;QACzE,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAA;QACxC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;YACxB,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,EAAE,cAAc,CAAC;YACnE,IAAI,EAAE;gBACF,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE;gBAC5C,KAAK,OAAA;aACR;YACD,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM;YACtF,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,+BAA+B;YAC7D,QAAQ,EAAE,UAAC,QAAQ;;gBACf,IAAM,YAAY,GAAG,MAAA,QAAQ,CAAC,IAAI,0CAAG,qBAAqB,CAAC,CAAA;gBAC3D,QAAQ,CAAC,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAG,GAAG,CAAC,KAAI,SAAS,CAAC,CAAA;YAC9C,CAAC;SACJ,CAAC,CAAA;IACN,CAAC;IAED;;;;;;;;;OASG;IACH,8CAAgB,GAAhB,UAAiB,GAAW,EAAE,OAAsC;QAAtC,wBAAA,EAAA,YAAsC;QAChE,IAAI,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC;YAC5E,MAAM,CAAC,IAAI,CAAC,4BAA4B,GAAG,GAAG,GAAG,+CAA+C,CAAC,CAAA;YACjG,OAAO,SAAS,CAAA;QACpB,CAAC;QACD,OAAO,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;IAC9C,CAAC;IAED,oDAAsB,GAAtB,UAAuB,OAA6B;QAChD,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IAC/C,CAAC;IAED,uDAAyB,GAAzB,UAA0B,OAA6B;QACnD,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,KAAK,OAAO,EAAb,CAAa,CAAC,CAAA;IAC9F,CAAC;IAED,kDAAoB,GAApB,UAAqB,QAAiC,EAAE,aAAuB;QAC3E,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;YAC7B,OAAM;QACV,CAAC;QACD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAA;QAE3B,IAAM,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAA;QAC3C,IAAM,mBAAmB,GAAG,IAAI,CAAC,eAAe,EAAE,CAAA;QAClD,8BAA8B,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,YAAY,EAAE,mBAAmB,CAAC,CAAA;QACtG,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC,CAAA;IAClD,CAAC;IAED;;OAEG;IACH,sCAAQ,GAAR,UAAS,KAA4D,EAAE,eAAgC;QAAhC,gCAAA,EAAA,uBAAgC;QACnG,MAAM,CAAC,IAAI,CAAC,kEAAkE,CAAC,CAAA;QAC/E,IAAI,CAAC,oBAAoB,CAAC;YACtB,KAAK,EAAE,KAAK;YACZ,eAAe,EAAE,eAAe;SACnC,CAAC,CAAA;IACN,CAAC;IAED;;;;;;;;;;;;;;;;OAgBG;IACH,kDAAoB,GAApB,UAAqB,eAA4C;;;QAC7D,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;YACxD,OAAO,MAAM,CAAC,oBAAoB,CAAC,4CAA4C,CAAC,CAAA;QACpF,CAAC;QAED,6GAA6G;QAC7G,IAAI,eAAe,KAAK,KAAK,EAAE,CAAC;YAC5B,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,kCAAkC,CAAC,CAAA;YACxE,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,0CAA0C,CAAC,CAAA;YAChF,IAAI,CAAC,0BAA0B,EAAE,CAAA;YACjC,OAAM;QACV,CAAC;QAED,IACI,eAAe;YACf,OAAO,eAAe,KAAK,QAAQ;YACnC,CAAC,OAAO,IAAI,eAAe,IAAI,UAAU,IAAI,eAAe,CAAC,EAC/D,CAAC;YACC,IAAM,OAAO,GAAG,eAAe,CAAA;YAC/B,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,MAAA,OAAO,CAAC,eAAe,mCAAI,KAAK,CAAC,CAAA;YAElE,6HAA6H;YAC7H,IAAI,OAAO,IAAI,OAAO,EAAE,CAAC;gBACrB,IAAI,OAAO,CAAC,KAAK,KAAK,KAAK,EAAE,CAAC;oBAC1B,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,kCAAkC,CAAC,CAAA;gBAC5E,CAAC;qBAAM,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;oBACvB,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;wBACzB,IAAM,QAAQ,GAAqC,EAAE,CAAA;wBACrD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;4BAC5C,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;wBACrC,CAAC;wBACD,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,WAAG,GAAC,kCAAkC,IAAG,QAAQ,MAAG,CAAA;oBAC1F,CAAC;yBAAM,CAAC;wBACJ,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,WAAG,GAAC,kCAAkC,IAAG,OAAO,CAAC,KAAK,MAAG,CAAA;oBAC/F,CAAC;gBACL,CAAC;YACL,CAAC;YAED,2JAA2J;YAC3J,IAAI,UAAU,IAAI,OAAO,EAAE,CAAC;gBACxB,IAAI,OAAO,CAAC,QAAQ,KAAK,KAAK,EAAE,CAAC;oBAC7B,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,0CAA0C,CAAC,CAAA;gBACpF,CAAC;qBAAM,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;oBAC1B,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ;wBAC9B,GAAC,0CAA0C,IAAG,OAAO,CAAC,QAAQ;4BAChE,CAAA;gBACN,CAAC;YACL,CAAC;YAED,IAAI,CAAC,0BAA0B,EAAE,CAAA;YACjC,OAAM;QACV,CAAC;QAED,IAAI,CAAC,0BAA0B,EAAE,CAAA;IACrC,CAAC;IAED;;;;;;;;;;;;OAYG;IACH,4CAAc,GAAd,UAAe,QAA8B;QAA7C,iBAOC;QANG,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAA;QACrC,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;YACjB,IAAA,KAA0B,IAAI,CAAC,gCAAgC,EAAE,EAA/D,KAAK,WAAA,EAAE,YAAY,kBAA4C,CAAA;YACvE,QAAQ,CAAC,KAAK,EAAE,YAAY,CAAC,CAAA;QACjC,CAAC;QACD,OAAO,cAAM,OAAA,KAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,EAAxC,CAAwC,CAAA;IACzD,CAAC;IAED,gEAAkC,GAAlC,UAAmC,GAAW,EAAE,UAAmB;;;QAC/D,IAAM,8BAA8B,GAChC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,iCAAiC,CAAC,IAAI,EAAE,CAAA;QACvE,IAAM,OAAO,GAAG,8BAA8B,CAAC,IAAI,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,OAAO,KAAK,GAAG,EAAjB,CAAiB,CAAC,CAAA;QAE7E,IAAM,oBAAoB;YACtB,GAAC,8BAAuB,GAAG,CAAE,IAAG,UAAU;eAC7C,CAAA;QAED,IAAM,UAAU,GAAe;YAC3B,aAAa,EAAE,GAAG;YAClB,mBAAmB,EAAE,UAAU;YAC/B,IAAI,EAAE,oBAAoB;SAC7B,CAAA;QAED,IAAI,OAAO,EAAE,CAAC;YACV,UAAU,CAAC,4BAA4B,CAAC,GAAG,OAAO,CAAC,IAAI,CAAA;QAC3D,CAAC;QAED,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,4BAA4B,EAAE,UAAU,CAAC,CAAA;QAC/D,IAAI,CAAC,2BAA2B,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAA;QAE7D,IAAM,QAAQ,yBAAQ,IAAI,CAAC,eAAe,EAAE,gBAAG,GAAG,IAAG,UAAU,MAAE,CAAA;QACjE,MAAA,IAAI,CAAC,QAAQ,CAAC,WAAW,0CAAE,QAAQ;YAC/B,GAAC,gCAAgC,IAAG,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;YACnF,GAAC,qBAAqB,IAAG,QAAQ;gBACnC,CAAA;QACF,IAAI,CAAC,0BAA0B,EAAE,CAAA;IACrC,CAAC;IAED,oDAAsB,GAAtB,UACI,QAAoC,EACpC,YAAoB,EACpB,MAAkC;QAHtC,iBA4BC;QA1BG,6BAAA,EAAA,oBAAoB;QAGpB,IAAM,8BAA8B,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,iCAAiC,CAAC,CAAA;QAEpG,IAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,WAAI,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,gBAAS,CAAC,CAAE,EAAZ,CAAY,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAE,CAAC,CAAC,CAAC,EAAE,CAAA;QAEjF,IAAI,CAAC,8BAA8B,IAAI,YAAY,EAAE,CAAC;YAClD,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;gBACxB,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,WAAW,CACxC,KAAK,EACL,4CAAqC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,SAAG,WAAW,CAAE,CAClF;gBACD,MAAM,EAAE,KAAK;gBACb,QAAQ,EAAE,UAAC,QAAQ;;;oBACf,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;wBACjB,OAAM;oBACV,CAAC;oBACD,IAAM,mBAAmB,GAAI,QAAQ,CAAC,IAAmC,CAAC,mBAAmB,CAAA;oBAC7F,MAAA,KAAI,CAAC,QAAQ,CAAC,WAAW,0CAAE,QAAQ,WAAG,GAAC,iCAAiC,IAAG,mBAAmB,MAAG,CAAA;oBACjG,OAAO,QAAQ,CAAC,mBAAmB,CAAC,CAAA;gBACxC,CAAC;aACJ,CAAC,CAAA;QACN,CAAC;aAAM,CAAC;YACJ,OAAO,QAAQ,CAAC,8BAA8B,CAAC,CAAA;QACnD,CAAC;IACL,CAAC;IAED,8DAAgC,GAAhC;QACI,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAA;QAC7B,IAAM,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAA;QAE3C,gBAAgB;QAChB,IAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,UAAC,IAAI,IAAK,OAAA,YAAY,CAAC,IAAI,CAAC,EAAlB,CAAkB,CAAC,CAAA;QAC9D,IAAM,kBAAkB,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;aAC/C,MAAM,CAAC,UAAC,UAAU,IAAK,OAAA,YAAY,CAAC,UAAU,CAAC,EAAxB,CAAwB,CAAC;aAChD,MAAM,CAAC,UAAC,GAAqC,EAAE,GAAG;YAC/C,GAAG,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC,GAAG,CAAC,CAAA;YAC5B,OAAO,GAAG,CAAA;QACd,CAAC,EAAE,EAAE,CAAC,CAAA;QAEV,OAAO;YACH,KAAK,EAAE,WAAW;YAClB,YAAY,EAAE,kBAAkB;SACnC,CAAA;IACL,CAAC;IAED,wDAA0B,GAA1B,UAA2B,aAAuB;QACxC,IAAA,KAA0B,IAAI,CAAC,gCAAgC,EAAE,EAA/D,KAAK,WAAA,EAAE,YAAY,kBAA4C,CAAA;QACvE,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,UAAC,OAAO,IAAK,OAAA,OAAO,CAAC,KAAK,EAAE,YAAY,EAAE,EAAE,aAAa,eAAA,EAAE,CAAC,EAA/C,CAA+C,CAAC,CAAA;IACvG,CAAC;IAED;;;;OAIG;IACH,yDAA2B,GAA3B,UAA4B,UAAsB,EAAE,kBAAyB;;QAAzB,mCAAA,EAAA,yBAAyB;QACzE,kCAAkC;QAClC,IAAM,kBAAkB,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,4BAA4B,CAAC,IAAI,EAAE,CAAA;QAEzF,IAAI,CAAC,QAAQ,CAAC,QAAQ;YAClB,GAAC,4BAA4B,0BACtB,kBAAkB,GAClB,UAAU,CAChB;gBACH,CAAA;QAEF,IAAI,kBAAkB,EAAE,CAAC;YACrB,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,CAAA;QACtC,CAAC;IACL,CAAC;IAED,2DAA6B,GAA7B;QACI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,4BAA4B,CAAC,CAAA;IAC1D,CAAC;IAED;;;;;;;OAOG;IACH,wDAA0B,GAA1B,UAA2B,UAA0C,EAAE,kBAAyB;;QAAzB,mCAAA,EAAA,yBAAyB;QAC5F,iCAAiC;QACjC,IAAM,kBAAkB,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,2BAA2B,CAAC,IAAI,EAAE,CAAA;QAExF,IAAI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC/C,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,UAAC,SAAS;gBAC9C,kBAAkB,CAAC,SAAS,CAAC,yBACtB,kBAAkB,CAAC,SAAS,CAAC,GAC7B,UAAU,CAAC,SAAS,CAAC,CAC3B,CAAA;gBACD,OAAO,UAAU,CAAC,SAAS,CAAC,CAAA;YAChC,CAAC,CAAC,CAAA;QACN,CAAC;QAED,IAAI,CAAC,QAAQ,CAAC,QAAQ;YAClB,GAAC,2BAA2B,0BACrB,kBAAkB,GAClB,UAAU,CAChB;gBACH,CAAA;QAEF,IAAI,kBAAkB,EAAE,CAAC;YACrB,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,CAAA;QACtC,CAAC;IACL,CAAC;IAED,0DAA4B,GAA5B,UAA6B,UAAmB;;QAC5C,IAAI,UAAU,EAAE,CAAC;YACb,IAAM,kBAAkB,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,2BAA2B,CAAC,IAAI,EAAE,CAAA;YACxF,IAAI,CAAC,QAAQ,CAAC,QAAQ;gBAClB,GAAC,2BAA2B,0BAAQ,kBAAkB,gBAAG,UAAU,IAAG,EAAE,MAAE;oBAC5E,CAAA;QACN,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,2BAA2B,CAAC,CAAA;QACzD,CAAC;IACL,CAAC;IACL,0BAAC;AAAD,CAAC,AA1lBD,IA0lBC","sourcesContent":["import { entries, extend } from './utils'\nimport { PostHog } from './posthog-core'\nimport {\n    DecideResponse,\n    FeatureFlagsCallback,\n    EarlyAccessFeatureCallback,\n    EarlyAccessFeatureResponse,\n    Properties,\n    JsonType,\n    Compression,\n    EarlyAccessFeature,\n    RemoteConfigFeatureFlagCallback,\n    EarlyAccessFeatureStage,\n} from './types'\nimport { PostHogPersistence } from './posthog-persistence'\n\nimport {\n    PERSISTENCE_EARLY_ACCESS_FEATURES,\n    ENABLED_FEATURE_FLAGS,\n    STORED_GROUP_PROPERTIES_KEY,\n    STORED_PERSON_PROPERTIES_KEY,\n    FLAG_CALL_REPORTED,\n} from './constants'\n\nimport { isArray } from './utils/type-utils'\nimport { createLogger } from './utils/logger'\n\nconst logger = createLogger('[FeatureFlags]')\n\nconst PERSISTENCE_ACTIVE_FEATURE_FLAGS = '$active_feature_flags'\nconst PERSISTENCE_OVERRIDE_FEATURE_FLAGS = '$override_feature_flags'\nconst PERSISTENCE_FEATURE_FLAG_PAYLOADS = '$feature_flag_payloads'\nconst PERSISTENCE_OVERRIDE_FEATURE_FLAG_PAYLOADS = '$override_feature_flag_payloads'\nconst PERSISTENCE_FEATURE_FLAG_REQUEST_ID = '$feature_flag_request_id'\n\nexport const filterActiveFeatureFlags = (featureFlags?: Record<string, string | boolean>) => {\n    const activeFeatureFlags: Record<string, string | boolean> = {}\n    for (const [key, value] of entries(featureFlags || {})) {\n        if (value) {\n            activeFeatureFlags[key] = value\n        }\n    }\n    return activeFeatureFlags\n}\n\nexport const parseFeatureFlagDecideResponse = (\n    response: Partial<DecideResponse>,\n    persistence: PostHogPersistence,\n    currentFlags: Record<string, string | boolean> = {},\n    currentFlagPayloads: Record<string, JsonType> = {}\n) => {\n    const flags = response['featureFlags']\n    const flagPayloads = response['featureFlagPayloads']\n    const requestId = response['requestId']\n    if (!flags) {\n        return\n    }\n    // using the v1 api\n    if (isArray(flags)) {\n        const $enabled_feature_flags: Record<string, boolean> = {}\n        if (flags) {\n            for (let i = 0; i < flags.length; i++) {\n                $enabled_feature_flags[flags[i]] = true\n            }\n        }\n        persistence &&\n            persistence.register({\n                [PERSISTENCE_ACTIVE_FEATURE_FLAGS]: flags,\n                [ENABLED_FEATURE_FLAGS]: $enabled_feature_flags,\n            })\n        return\n    }\n\n    // using the v2+ api\n    let newFeatureFlags = flags\n    let newFeatureFlagPayloads = flagPayloads\n    if (response.errorsWhileComputingFlags) {\n        // if not all flags were computed, we upsert flags instead of replacing them\n        newFeatureFlags = { ...currentFlags, ...newFeatureFlags }\n        newFeatureFlagPayloads = { ...currentFlagPayloads, ...newFeatureFlagPayloads }\n    }\n    persistence &&\n        persistence.register({\n            [PERSISTENCE_ACTIVE_FEATURE_FLAGS]: Object.keys(filterActiveFeatureFlags(newFeatureFlags)),\n            [ENABLED_FEATURE_FLAGS]: newFeatureFlags || {},\n            [PERSISTENCE_FEATURE_FLAG_PAYLOADS]: newFeatureFlagPayloads || {},\n            ...(requestId ? { [PERSISTENCE_FEATURE_FLAG_REQUEST_ID]: requestId } : {}),\n        })\n}\n\ntype FeatureFlagOverrides = {\n    [flagName: string]: string | boolean\n}\n\ntype FeatureFlagPayloadOverrides = {\n    [flagName: string]: JsonType\n}\n\ntype FeatureFlagOverrideOptions = {\n    flags?: boolean | string[] | FeatureFlagOverrides\n    payloads?: FeatureFlagPayloadOverrides\n    suppressWarning?: boolean\n}\n\ntype OverrideFeatureFlagsOptions =\n    | boolean // clear all overrides\n    | string[] // enable list of flags\n    | FeatureFlagOverrides // set variants directly\n    | FeatureFlagOverrideOptions\n\nexport enum QuotaLimitedResource {\n    FeatureFlags = 'feature_flags',\n    Recordings = 'recordings',\n}\n\nexport class PostHogFeatureFlags {\n    _override_warning: boolean = false\n    featureFlagEventHandlers: FeatureFlagsCallback[]\n    $anon_distinct_id: string | undefined\n    private _hasLoadedFlags: boolean = false\n    private _requestInFlight: boolean = false\n    private _reloadingDisabled: boolean = false\n    private _additionalReloadRequested: boolean = false\n    private _reloadDebouncer?: any\n    private _decideCalled: boolean = false\n    private _flagsLoadedFromRemote: boolean = false\n\n    constructor(private instance: PostHog) {\n        this.featureFlagEventHandlers = []\n    }\n\n    decide(): void {\n        if (this.instance.config.__preview_remote_config) {\n            // If remote config is enabled we don't call decide and we mark it as called so that we don't simulate it\n            this._decideCalled = true\n            return\n        }\n\n        // TRICKY: We want to disable flags if we don't have a queued reload, and one of the settings exist for disabling on first load\n        const disableFlags =\n            !this._reloadDebouncer &&\n            (this.instance.config.advanced_disable_feature_flags ||\n                this.instance.config.advanced_disable_feature_flags_on_first_load)\n\n        this._callDecideEndpoint({\n            disableFlags,\n        })\n    }\n\n    get hasLoadedFlags(): boolean {\n        return this._hasLoadedFlags\n    }\n\n    getFlags(): string[] {\n        return Object.keys(this.getFlagVariants())\n    }\n\n    getFlagVariants(): Record<string, string | boolean> {\n        const enabledFlags = this.instance.get_property(ENABLED_FEATURE_FLAGS)\n        const overriddenFlags = this.instance.get_property(PERSISTENCE_OVERRIDE_FEATURE_FLAGS)\n        if (!overriddenFlags) {\n            return enabledFlags || {}\n        }\n\n        const finalFlags = extend({}, enabledFlags)\n        const overriddenKeys = Object.keys(overriddenFlags)\n        for (let i = 0; i < overriddenKeys.length; i++) {\n            finalFlags[overriddenKeys[i]] = overriddenFlags[overriddenKeys[i]]\n        }\n        if (!this._override_warning) {\n            logger.warn(' Overriding feature flags!', {\n                enabledFlags,\n                overriddenFlags,\n                finalFlags,\n            })\n            this._override_warning = true\n        }\n        return finalFlags\n    }\n\n    getFlagPayloads(): Record<string, JsonType> {\n        const flagPayloads = this.instance.get_property(PERSISTENCE_FEATURE_FLAG_PAYLOADS)\n        const overriddenPayloads = this.instance.get_property(PERSISTENCE_OVERRIDE_FEATURE_FLAG_PAYLOADS)\n\n        if (!overriddenPayloads) {\n            return flagPayloads || {}\n        }\n\n        const finalPayloads = extend({}, flagPayloads || {})\n        const overriddenKeys = Object.keys(overriddenPayloads)\n        for (let i = 0; i < overriddenKeys.length; i++) {\n            finalPayloads[overriddenKeys[i]] = overriddenPayloads[overriddenKeys[i]]\n        }\n\n        if (!this._override_warning) {\n            logger.warn(' Overriding feature flag payloads!', {\n                flagPayloads,\n                overriddenPayloads,\n                finalPayloads,\n            })\n            this._override_warning = true\n        }\n        return finalPayloads\n    }\n\n    /**\n     * Reloads feature flags asynchronously.\n     *\n     * Constraints:\n     *\n     * 1. Avoid parallel requests\n     * 2. Delay a few milliseconds after each reloadFeatureFlags call to batch subsequent changes together\n     */\n    reloadFeatureFlags(): void {\n        if (this._reloadingDisabled || this.instance.config.advanced_disable_feature_flags) {\n            // If reloading has been explicitly disabled then we don't want to do anything\n            // Or if feature flags are disabled\n            return\n        }\n\n        if (this._reloadDebouncer) {\n            // If we're already in a debounce then we don't want to do anything\n            return\n        }\n\n        // Debounce multiple calls on the same tick\n        this._reloadDebouncer = setTimeout(() => {\n            this._callDecideEndpoint()\n        }, 5)\n    }\n\n    private clearDebouncer(): void {\n        clearTimeout(this._reloadDebouncer)\n        this._reloadDebouncer = undefined\n    }\n\n    ensureFlagsLoaded(): void {\n        if (this._hasLoadedFlags || this._requestInFlight || this._reloadDebouncer) {\n            // If we are or have already loaded the flags then we don't want to do anything\n            return\n        }\n\n        this.reloadFeatureFlags()\n    }\n\n    setAnonymousDistinctId(anon_distinct_id: string): void {\n        this.$anon_distinct_id = anon_distinct_id\n    }\n\n    setReloadingPaused(isPaused: boolean): void {\n        this._reloadingDisabled = isPaused\n    }\n\n    /**\n     * NOTE: This is used both for flags and remote config. Once the RemoteConfig is fully released this will essentially only\n     * be for flags and can eventually be replaced with the new flags endpoint\n     */\n    _callDecideEndpoint(options?: { disableFlags?: boolean }): void {\n        // Ensure we don't have double queued decide requests\n        this.clearDebouncer()\n        if (this.instance.config.advanced_disable_decide) {\n            // The way this is documented is essentially used to refuse to ever call the decide endpoint.\n            return\n        }\n        if (this._requestInFlight) {\n            this._additionalReloadRequested = true\n            return\n        }\n        const token = this.instance.config.token\n        const data: Record<string, any> = {\n            token: token,\n            distinct_id: this.instance.get_distinct_id(),\n            groups: this.instance.getGroups(),\n            $anon_distinct_id: this.$anon_distinct_id,\n            person_properties: {\n                ...(this.instance.persistence?.get_initial_props() || {}),\n                ...(this.instance.get_property(STORED_PERSON_PROPERTIES_KEY) || {}),\n            },\n            group_properties: this.instance.get_property(STORED_GROUP_PROPERTIES_KEY),\n        }\n\n        if (options?.disableFlags || this.instance.config.advanced_disable_feature_flags) {\n            data.disable_flags = true\n        }\n\n        this._requestInFlight = true\n        this.instance._send_request({\n            method: 'POST',\n            url: this.instance.requestRouter.endpointFor('api', '/decide/?v=3'),\n            data,\n            compression: this.instance.config.disable_compression ? undefined : Compression.Base64,\n            timeout: this.instance.config.feature_flag_request_timeout_ms,\n            callback: (response) => {\n                let errorsLoading = true\n\n                if (response.statusCode === 200) {\n                    // successful request\n                    // reset anon_distinct_id after at least a single request with it\n                    // makes it through\n                    if (!this._additionalReloadRequested) {\n                        this.$anon_distinct_id = undefined\n                    }\n                    errorsLoading = false\n                }\n\n                this._requestInFlight = false\n\n                if (!this._decideCalled) {\n                    this._decideCalled = true\n                    this.instance._onRemoteConfig(response.json ?? {})\n                }\n\n                if (data.disable_flags && !this._additionalReloadRequested) {\n                    // If flags are disabled then there is no need to call decide again (flags are the only thing that may change)\n                    // UNLESS, an additional reload is requested.\n                    return\n                }\n\n                this._flagsLoadedFromRemote = !errorsLoading\n\n                if (response.json && response.json.quotaLimited?.includes(QuotaLimitedResource.FeatureFlags)) {\n                    // log a warning and then early return\n                    logger.warn(\n                        'You have hit your feature flags quota limit, and will not be able to load feature flags until the quota is reset.  Please visit https://posthog.com/docs/billing/limits-alerts to learn more.'\n                    )\n                    return\n                }\n\n                this.receivedFeatureFlags(response.json ?? {}, errorsLoading)\n\n                if (this._additionalReloadRequested) {\n                    this._additionalReloadRequested = false\n                    this._callDecideEndpoint()\n                }\n            },\n        })\n    }\n\n    /*\n     * Get feature flag's value for user.\n     *\n     * ### Usage:\n     *\n     *     if(posthog.getFeatureFlag('my-flag') === 'some-variant') { // do something }\n     *\n     * @param {Object|String} key Key of the feature flag.\n     * @param {Object|String} options (optional) If {send_event: false}, we won't send an $feature_flag_call event to PostHog.\n     */\n    getFeatureFlag(key: string, options: { send_event?: boolean } = {}): boolean | string | undefined {\n        if (!this._hasLoadedFlags && !(this.getFlags() && this.getFlags().length > 0)) {\n            logger.warn('getFeatureFlag for key \"' + key + '\" failed. Feature flags didn\\'t load in time.')\n            return undefined\n        }\n        const flagValue = this.getFlagVariants()[key]\n        const flagReportValue = `${flagValue}`\n        const requestId = this.instance.get_property(PERSISTENCE_FEATURE_FLAG_REQUEST_ID) || undefined\n        const flagCallReported: Record<string, string[]> = this.instance.get_property(FLAG_CALL_REPORTED) || {}\n\n        if (options.send_event || !('send_event' in options)) {\n            if (!(key in flagCallReported) || !flagCallReported[key].includes(flagReportValue)) {\n                if (isArray(flagCallReported[key])) {\n                    flagCallReported[key].push(flagReportValue)\n                } else {\n                    flagCallReported[key] = [flagReportValue]\n                }\n                this.instance.persistence?.register({ [FLAG_CALL_REPORTED]: flagCallReported })\n\n                this.instance.capture('$feature_flag_called', {\n                    $feature_flag: key,\n                    $feature_flag_response: flagValue,\n                    $feature_flag_payload: this.getFeatureFlagPayload(key) || null,\n                    $feature_flag_request_id: requestId,\n                    $feature_flag_bootstrapped_response: this.instance.config.bootstrap?.featureFlags?.[key] || null,\n                    $feature_flag_bootstrapped_payload:\n                        this.instance.config.bootstrap?.featureFlagPayloads?.[key] || null,\n                    // If we haven't yet received a response from the /decide endpoint, we must have used the bootstrapped value\n                    $used_bootstrap_value: !this._flagsLoadedFromRemote,\n                })\n            }\n        }\n        return flagValue\n    }\n\n    getFeatureFlagPayload(key: string): JsonType {\n        const payloads = this.getFlagPayloads()\n        return payloads[key]\n    }\n\n    /*\n     * Fetches the payload for a remote config feature flag. This method will bypass any cached values and fetch the latest\n     * value from the PostHog API.\n     *\n     * Note: Because the posthog-js SDK is primarily used with public project API keys, encrypted remote config payloads will\n     * be redacted, never decrypted in the response.\n     *\n     * ### Usage:\n     *\n     *     getRemoteConfigPayload(\"home-page-welcome-message\", (payload) => console.log(`Fetched remote config: ${payload}`))\n     *\n     * @param {String} key Key of the feature flag.\n     * @param {Function} [callback] The callback function will be called once the remote config feature flag payload has been fetched.\n     */\n    getRemoteConfigPayload(key: string, callback: RemoteConfigFeatureFlagCallback): void {\n        const token = this.instance.config.token\n        this.instance._send_request({\n            method: 'POST',\n            url: this.instance.requestRouter.endpointFor('api', '/decide/?v=3'),\n            data: {\n                distinct_id: this.instance.get_distinct_id(),\n                token,\n            },\n            compression: this.instance.config.disable_compression ? undefined : Compression.Base64,\n            timeout: this.instance.config.feature_flag_request_timeout_ms,\n            callback: (response) => {\n                const flagPayloads = response.json?.['featureFlagPayloads']\n                callback(flagPayloads?.[key] || undefined)\n            },\n        })\n    }\n\n    /*\n     * See if feature flag is enabled for user.\n     *\n     * ### Usage:\n     *\n     *     if(posthog.isFeatureEnabled('beta-feature')) { // do something }\n     *\n     * @param {Object|String} key Key of the feature flag.\n     * @param {Object|String} options (optional) If {send_event: false}, we won't send an $feature_flag_call event to PostHog.\n     */\n    isFeatureEnabled(key: string, options: { send_event?: boolean } = {}): boolean | undefined {\n        if (!this._hasLoadedFlags && !(this.getFlags() && this.getFlags().length > 0)) {\n            logger.warn('isFeatureEnabled for key \"' + key + '\" failed. Feature flags didn\\'t load in time.')\n            return undefined\n        }\n        return !!this.getFeatureFlag(key, options)\n    }\n\n    addFeatureFlagsHandler(handler: FeatureFlagsCallback): void {\n        this.featureFlagEventHandlers.push(handler)\n    }\n\n    removeFeatureFlagsHandler(handler: FeatureFlagsCallback): void {\n        this.featureFlagEventHandlers = this.featureFlagEventHandlers.filter((h) => h !== handler)\n    }\n\n    receivedFeatureFlags(response: Partial<DecideResponse>, errorsLoading?: boolean): void {\n        if (!this.instance.persistence) {\n            return\n        }\n        this._hasLoadedFlags = true\n\n        const currentFlags = this.getFlagVariants()\n        const currentFlagPayloads = this.getFlagPayloads()\n        parseFeatureFlagDecideResponse(response, this.instance.persistence, currentFlags, currentFlagPayloads)\n        this._fireFeatureFlagsCallbacks(errorsLoading)\n    }\n\n    /**\n     * @deprecated Use overrideFeatureFlags instead. This will be removed in a future version.\n     */\n    override(flags: boolean | string[] | Record<string, string | boolean>, suppressWarning: boolean = false): void {\n        logger.warn('override is deprecated. Please use overrideFeatureFlags instead.')\n        this.overrideFeatureFlags({\n            flags: flags,\n            suppressWarning: suppressWarning,\n        })\n    }\n\n    /**\n     * Override feature flags on the client-side. Useful for setting non-persistent feature flags,\n     * or for testing/debugging feature flags in the PostHog app.\n     *\n     * ### Usage:\n     *\n     *     - posthog.feature_flags.overrideFeatureFlags(false) // clear all overrides\n     *     - posthog.feature_flags.overrideFeatureFlags(['beta-feature']) // enable flags\n     *     - posthog.feature_flags.overrideFeatureFlags({'beta-feature': 'variant'}) // set variants\n     *     - posthog.feature_flags.overrideFeatureFlags({ // set both flags and payloads\n     *         flags: {'beta-feature': 'variant'},\n     *         payloads: { 'beta-feature': { someData: true } }\n     *       })\n     *     - posthog.feature_flags.overrideFeatureFlags({ // only override payloads\n     *         payloads: { 'beta-feature': { someData: true } }\n     *       })\n     */\n    overrideFeatureFlags(overrideOptions: OverrideFeatureFlagsOptions): void {\n        if (!this.instance.__loaded || !this.instance.persistence) {\n            return logger.uninitializedWarning('posthog.feature_flags.overrideFeatureFlags')\n        }\n\n        // Clear all overrides if false, lets you do something like posthog.feature_flags.overrideFeatureFlags(false)\n        if (overrideOptions === false) {\n            this.instance.persistence.unregister(PERSISTENCE_OVERRIDE_FEATURE_FLAGS)\n            this.instance.persistence.unregister(PERSISTENCE_OVERRIDE_FEATURE_FLAG_PAYLOADS)\n            this._fireFeatureFlagsCallbacks()\n            return\n        }\n\n        if (\n            overrideOptions &&\n            typeof overrideOptions === 'object' &&\n            ('flags' in overrideOptions || 'payloads' in overrideOptions)\n        ) {\n            const options = overrideOptions\n            this._override_warning = Boolean(options.suppressWarning ?? false)\n\n            // Handle flags if provided, lets you do something like posthog.feature_flags.overrideFeatureFlags({flags: ['beta-feature']})\n            if ('flags' in options) {\n                if (options.flags === false) {\n                    this.instance.persistence.unregister(PERSISTENCE_OVERRIDE_FEATURE_FLAGS)\n                } else if (options.flags) {\n                    if (isArray(options.flags)) {\n                        const flagsObj: Record<string, string | boolean> = {}\n                        for (let i = 0; i < options.flags.length; i++) {\n                            flagsObj[options.flags[i]] = true\n                        }\n                        this.instance.persistence.register({ [PERSISTENCE_OVERRIDE_FEATURE_FLAGS]: flagsObj })\n                    } else {\n                        this.instance.persistence.register({ [PERSISTENCE_OVERRIDE_FEATURE_FLAGS]: options.flags })\n                    }\n                }\n            }\n\n            // Handle payloads independently, lets you do something like posthog.feature_flags.overrideFeatureFlags({payloads: { 'beta-feature': { someData: true } }})\n            if ('payloads' in options) {\n                if (options.payloads === false) {\n                    this.instance.persistence.unregister(PERSISTENCE_OVERRIDE_FEATURE_FLAG_PAYLOADS)\n                } else if (options.payloads) {\n                    this.instance.persistence.register({\n                        [PERSISTENCE_OVERRIDE_FEATURE_FLAG_PAYLOADS]: options.payloads,\n                    })\n                }\n            }\n\n            this._fireFeatureFlagsCallbacks()\n            return\n        }\n\n        this._fireFeatureFlagsCallbacks()\n    }\n\n    /*\n     * Register an event listener that runs when feature flags become available or when they change.\n     * If there are flags, the listener is called immediately in addition to being called on future changes.\n     *\n     * ### Usage:\n     *\n     *     posthog.onFeatureFlags(function(featureFlags, featureFlagsVariants, { errorsLoading }) { // do something })\n     *\n     * @param {Function} [callback] The callback function will be called once the feature flags are ready or when they are updated.\n     *                              It'll return a list of feature flags enabled for the user, the variants,\n     *                              and also a context object indicating whether we succeeded to fetch the flags or not.\n     * @returns {Function} A function that can be called to unsubscribe the listener. Used by useEffect when the component unmounts.\n     */\n    onFeatureFlags(callback: FeatureFlagsCallback): () => void {\n        this.addFeatureFlagsHandler(callback)\n        if (this._hasLoadedFlags) {\n            const { flags, flagVariants } = this._prepareFeatureFlagsForCallbacks()\n            callback(flags, flagVariants)\n        }\n        return () => this.removeFeatureFlagsHandler(callback)\n    }\n\n    updateEarlyAccessFeatureEnrollment(key: string, isEnrolled: boolean): void {\n        const existing_early_access_features: EarlyAccessFeature[] =\n            this.instance.get_property(PERSISTENCE_EARLY_ACCESS_FEATURES) || []\n        const feature = existing_early_access_features.find((f) => f.flagKey === key)\n\n        const enrollmentPersonProp = {\n            [`$feature_enrollment/${key}`]: isEnrolled,\n        }\n\n        const properties: Properties = {\n            $feature_flag: key,\n            $feature_enrollment: isEnrolled,\n            $set: enrollmentPersonProp,\n        }\n\n        if (feature) {\n            properties['$early_access_feature_name'] = feature.name\n        }\n\n        this.instance.capture('$feature_enrollment_update', properties)\n        this.setPersonPropertiesForFlags(enrollmentPersonProp, false)\n\n        const newFlags = { ...this.getFlagVariants(), [key]: isEnrolled }\n        this.instance.persistence?.register({\n            [PERSISTENCE_ACTIVE_FEATURE_FLAGS]: Object.keys(filterActiveFeatureFlags(newFlags)),\n            [ENABLED_FEATURE_FLAGS]: newFlags,\n        })\n        this._fireFeatureFlagsCallbacks()\n    }\n\n    getEarlyAccessFeatures(\n        callback: EarlyAccessFeatureCallback,\n        force_reload = false,\n        stages?: EarlyAccessFeatureStage[]\n    ): void {\n        const existing_early_access_features = this.instance.get_property(PERSISTENCE_EARLY_ACCESS_FEATURES)\n\n        const stageParams = stages ? `&${stages.map((s) => `stage=${s}`).join('&')}` : ''\n\n        if (!existing_early_access_features || force_reload) {\n            this.instance._send_request({\n                url: this.instance.requestRouter.endpointFor(\n                    'api',\n                    `/api/early_access_features/?token=${this.instance.config.token}${stageParams}`\n                ),\n                method: 'GET',\n                callback: (response) => {\n                    if (!response.json) {\n                        return\n                    }\n                    const earlyAccessFeatures = (response.json as EarlyAccessFeatureResponse).earlyAccessFeatures\n                    this.instance.persistence?.register({ [PERSISTENCE_EARLY_ACCESS_FEATURES]: earlyAccessFeatures })\n                    return callback(earlyAccessFeatures)\n                },\n            })\n        } else {\n            return callback(existing_early_access_features)\n        }\n    }\n\n    _prepareFeatureFlagsForCallbacks(): { flags: string[]; flagVariants: Record<string, string | boolean> } {\n        const flags = this.getFlags()\n        const flagVariants = this.getFlagVariants()\n\n        // Return truthy\n        const truthyFlags = flags.filter((flag) => flagVariants[flag])\n        const truthyFlagVariants = Object.keys(flagVariants)\n            .filter((variantKey) => flagVariants[variantKey])\n            .reduce((res: Record<string, string | boolean>, key) => {\n                res[key] = flagVariants[key]\n                return res\n            }, {})\n\n        return {\n            flags: truthyFlags,\n            flagVariants: truthyFlagVariants,\n        }\n    }\n\n    _fireFeatureFlagsCallbacks(errorsLoading?: boolean): void {\n        const { flags, flagVariants } = this._prepareFeatureFlagsForCallbacks()\n        this.featureFlagEventHandlers.forEach((handler) => handler(flags, flagVariants, { errorsLoading }))\n    }\n\n    /**\n     * Set override person properties for feature flags.\n     * This is used when dealing with new persons / where you don't want to wait for ingestion\n     * to update user properties.\n     */\n    setPersonPropertiesForFlags(properties: Properties, reloadFeatureFlags = true): void {\n        // Get persisted person properties\n        const existingProperties = this.instance.get_property(STORED_PERSON_PROPERTIES_KEY) || {}\n\n        this.instance.register({\n            [STORED_PERSON_PROPERTIES_KEY]: {\n                ...existingProperties,\n                ...properties,\n            },\n        })\n\n        if (reloadFeatureFlags) {\n            this.instance.reloadFeatureFlags()\n        }\n    }\n\n    resetPersonPropertiesForFlags(): void {\n        this.instance.unregister(STORED_PERSON_PROPERTIES_KEY)\n    }\n\n    /**\n     * Set override group properties for feature flags.\n     * This is used when dealing with new groups / where you don't want to wait for ingestion\n     * to update properties.\n     * Takes in an object, the key of which is the group type.\n     * For example:\n     *     setGroupPropertiesForFlags({'organization': { name: 'CYZ', employees: '11' } })\n     */\n    setGroupPropertiesForFlags(properties: { [type: string]: Properties }, reloadFeatureFlags = true): void {\n        // Get persisted group properties\n        const existingProperties = this.instance.get_property(STORED_GROUP_PROPERTIES_KEY) || {}\n\n        if (Object.keys(existingProperties).length !== 0) {\n            Object.keys(existingProperties).forEach((groupType) => {\n                existingProperties[groupType] = {\n                    ...existingProperties[groupType],\n                    ...properties[groupType],\n                }\n                delete properties[groupType]\n            })\n        }\n\n        this.instance.register({\n            [STORED_GROUP_PROPERTIES_KEY]: {\n                ...existingProperties,\n                ...properties,\n            },\n        })\n\n        if (reloadFeatureFlags) {\n            this.instance.reloadFeatureFlags()\n        }\n    }\n\n    resetGroupPropertiesForFlags(group_type?: string): void {\n        if (group_type) {\n            const existingProperties = this.instance.get_property(STORED_GROUP_PROPERTIES_KEY) || {}\n            this.instance.register({\n                [STORED_GROUP_PROPERTIES_KEY]: { ...existingProperties, [group_type]: {} },\n            })\n        } else {\n            this.instance.unregister(STORED_GROUP_PROPERTIES_KEY)\n        }\n    }\n}\n"]}