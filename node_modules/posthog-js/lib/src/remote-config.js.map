{"version":3,"file":"remote-config.js","sourceRoot":"","sources":["../../src/remote-config.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostHog } from './posthog-core'\nimport { RemoteConfig } from './types'\n\nimport { createLogger } from './utils/logger'\nimport { assignableWindow } from './utils/globals'\n\nconst logger = createLogger('[RemoteConfig]')\n\nexport class RemoteConfigLoader {\n    constructor(private readonly instance: PostHog) {}\n\n    get remoteConfig(): RemoteConfig | undefined {\n        return assignableWindow._POSTHOG_REMOTE_CONFIG?.[this.instance.config.token]?.config\n    }\n\n    private _loadRemoteConfigJs(cb: (config?: RemoteConfig) => void): void {\n        if (assignableWindow.__PosthogExtensions__?.loadExternalDependency) {\n            assignableWindow.__PosthogExtensions__?.loadExternalDependency?.(this.instance, 'remote-config', () => {\n                return cb(this.remoteConfig)\n            })\n        } else {\n            logger.error('PostHog Extensions not found. Cannot load remote config.')\n            cb()\n        }\n    }\n\n    private _loadRemoteConfigJSON(cb: (config?: RemoteConfig) => void): void {\n        this.instance._send_request({\n            method: 'GET',\n            url: this.instance.requestRouter.endpointFor('assets', `/array/${this.instance.config.token}/config`),\n            callback: (response) => {\n                cb(response.json as RemoteConfig | undefined)\n            },\n        })\n    }\n\n    load(): void {\n        try {\n            // Attempt 1 - use the pre-loaded config if it came as part of the token-specific array.js\n            if (this.remoteConfig) {\n                logger.info('Using preloaded remote config', this.remoteConfig)\n                this.onRemoteConfig(this.remoteConfig)\n                return\n            }\n\n            if (this.instance.config.advanced_disable_decide) {\n                // This setting is essentially saying \"dont call external APIs\" hence we respect it here\n                logger.warn('Remote config is disabled. Falling back to local config.')\n                return\n            }\n\n            // Attempt 2 - if we have the external deps loader then lets load the script version of the config that includes site apps\n            this._loadRemoteConfigJs((config) => {\n                if (!config) {\n                    logger.info('No config found after loading remote JS config. Falling back to JSON.')\n                    // Attempt 3 Load the config json instead of the script - we won't get site apps etc. but we will get the config\n                    this._loadRemoteConfigJSON((config) => {\n                        this.onRemoteConfig(config)\n                    })\n                    return\n                }\n\n                this.onRemoteConfig(config)\n            })\n        } catch (error) {\n            logger.error('Error loading remote config', error)\n        }\n    }\n\n    private onRemoteConfig(config?: RemoteConfig): void {\n        // NOTE: Once this is rolled out we will remove the \"decide\" related code above. Until then the code duplication is fine.\n        if (!config) {\n            logger.error('Failed to fetch remote config from PostHog.')\n            return\n        }\n\n        if (!this.instance.config.__preview_remote_config) {\n            logger.info('__preview_remote_config is disabled. Logging config instead', config)\n            return\n        }\n\n        this.instance._onRemoteConfig(config)\n\n        // We only need to reload if we haven't already loaded the flags or if the request is in flight\n        if (config.hasFeatureFlags !== false) {\n            // If the config has feature flags, we need to call decide to get the feature flags\n            // This completely separates it from the config logic which is good in terms of separation of concerns\n            this.instance.featureFlags.ensureFlagsLoaded()\n        }\n    }\n}\n"]}