{"version":3,"file":"page-view.js","sourceRoot":"","sources":["../../src/page-view.ts"],"names":[],"mappings":"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","sourcesContent":["import { window } from './utils/globals'\nimport { PostHog } from './posthog-core'\nimport { isUndefined } from './utils/type-utils'\nimport { clampToRange } from './utils/number-utils'\nimport { extend } from './utils'\n\ninterface PageViewEventProperties {\n    $pageview_id?: string\n    $prev_pageview_id?: string\n    $prev_pageview_pathname?: string\n    $prev_pageview_duration?: number // seconds\n    $prev_pageview_last_scroll?: number\n    $prev_pageview_last_scroll_percentage?: number\n    $prev_pageview_max_scroll?: number\n    $prev_pageview_max_scroll_percentage?: number\n    $prev_pageview_last_content?: number\n    $prev_pageview_last_content_percentage?: number\n    $prev_pageview_max_content?: number\n    $prev_pageview_max_content_percentage?: number\n}\n\n// This keeps track of the PageView state (such as the previous PageView's path, timestamp, id, and scroll properties).\n// We store the state in memory, which means that for non-SPA sites, the state will be lost on page reload. This means\n// that non-SPA sites should always send a $pageleave event on any navigation, before the page unloads. For SPA sites,\n// they only need to send a $pageleave event when the user navigates away from the site, as the information is not lost\n// on an internal navigation, and is included as the $prev_pageview_ properties in the next $pageview event.\n\n// Practically, this means that to find the scroll properties for a given pageview, you need to find the event where\n// event name is $pageview or $pageleave and where $prev_pageview_id matches the original pageview event's id.\n\nexport class PageViewManager {\n    _currentPageview?: { timestamp: Date; pageViewId: string | undefined; pathname: string | undefined }\n    _instance: PostHog\n\n    constructor(instance: PostHog) {\n        this._instance = instance\n    }\n\n    doPageView(timestamp: Date, pageViewId?: string): PageViewEventProperties {\n        const response = this._previousPageViewProperties(timestamp, pageViewId)\n\n        // On a pageview we reset the contexts\n        this._currentPageview = { pathname: window?.location.pathname ?? '', pageViewId, timestamp }\n        this._instance.scrollManager.resetContext()\n\n        return response\n    }\n\n    doPageLeave(timestamp: Date): PageViewEventProperties {\n        return this._previousPageViewProperties(timestamp, this._currentPageview?.pageViewId)\n    }\n\n    doEvent(): PageViewEventProperties {\n        return { $pageview_id: this._currentPageview?.pageViewId }\n    }\n\n    private _previousPageViewProperties(timestamp: Date, pageviewId: string | undefined): PageViewEventProperties {\n        const previousPageView = this._currentPageview\n\n        if (!previousPageView) {\n            return { $pageview_id: pageviewId }\n        }\n\n        let properties: PageViewEventProperties = {\n            $pageview_id: pageviewId,\n            $prev_pageview_id: previousPageView.pageViewId,\n        }\n\n        const scrollContext = this._instance.scrollManager.getContext()\n\n        if (scrollContext && !this._instance.config.disable_scroll_properties) {\n            let { maxScrollHeight, lastScrollY, maxScrollY, maxContentHeight, lastContentY, maxContentY } =\n                scrollContext\n\n            if (\n                !isUndefined(maxScrollHeight) &&\n                !isUndefined(lastScrollY) &&\n                !isUndefined(maxScrollY) &&\n                !isUndefined(maxContentHeight) &&\n                !isUndefined(lastContentY) &&\n                !isUndefined(maxContentY)\n            ) {\n                // Use ceil, so that e.g. scrolling 999.5px of a 1000px page is considered 100% scrolled\n                maxScrollHeight = Math.ceil(maxScrollHeight)\n                lastScrollY = Math.ceil(lastScrollY)\n                maxScrollY = Math.ceil(maxScrollY)\n                maxContentHeight = Math.ceil(maxContentHeight)\n                lastContentY = Math.ceil(lastContentY)\n                maxContentY = Math.ceil(maxContentY)\n\n                // if the maximum scroll height is near 0, then the percentage is 1\n                const lastScrollPercentage =\n                    maxScrollHeight <= 1 ? 1 : clampToRange(lastScrollY / maxScrollHeight, 0, 1)\n                const maxScrollPercentage = maxScrollHeight <= 1 ? 1 : clampToRange(maxScrollY / maxScrollHeight, 0, 1)\n                const lastContentPercentage =\n                    maxContentHeight <= 1 ? 1 : clampToRange(lastContentY / maxContentHeight, 0, 1)\n                const maxContentPercentage =\n                    maxContentHeight <= 1 ? 1 : clampToRange(maxContentY / maxContentHeight, 0, 1)\n\n                properties = extend(properties, {\n                    $prev_pageview_last_scroll: lastScrollY,\n                    $prev_pageview_last_scroll_percentage: lastScrollPercentage,\n                    $prev_pageview_max_scroll: maxScrollY,\n                    $prev_pageview_max_scroll_percentage: maxScrollPercentage,\n                    $prev_pageview_last_content: lastContentY,\n                    $prev_pageview_last_content_percentage: lastContentPercentage,\n                    $prev_pageview_max_content: maxContentY,\n                    $prev_pageview_max_content_percentage: maxContentPercentage,\n                })\n            }\n        }\n\n        if (previousPageView.pathname) {\n            properties.$prev_pageview_pathname = previousPageView.pathname\n        }\n        if (previousPageView.timestamp) {\n            // Use seconds, for consistency with our other duration-related properties like $duration\n            properties.$prev_pageview_duration = (timestamp.getTime() - previousPageView.timestamp.getTime()) / 1000\n        }\n\n        return properties\n    }\n}\n"]}