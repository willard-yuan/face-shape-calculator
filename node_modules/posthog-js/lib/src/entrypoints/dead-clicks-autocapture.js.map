{"version":3,"file":"dead-clicks-autocapture.js","sourceRoot":"","sources":["../../../src/entrypoints/dead-clicks-autocapture.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,gBAAgB,EAA4C,MAAM,kBAAkB,CAAA;AAE7F,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAA;AACnE,OAAO,EAAE,6BAA6B,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAA;AAEpF,OAAO,EAAE,+BAA+B,EAAE,MAAM,gBAAgB,CAAA;AAChE,OAAO,EAAE,kBAAkB,EAAE,aAAa,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAA;AACjF,OAAO,EAAE,uCAAuC,EAAE,MAAM,0BAA0B,CAAA;AAClF,OAAO,EAAE,gBAAgB,EAAE,MAAM,UAAU,CAAA;AAE3C,SAAS,OAAO,CAAC,KAAiB;IAC9B,IAAM,WAAW,GAAG,cAAc,CAAC,KAAK,CAAC,CAAA;IACzC,IAAI,WAAW,EAAE,CAAC;QACd,OAAO;YACH,IAAI,EAAE,WAAW;YACjB,aAAa,EAAE,KAAK;YACpB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;SACxB,CAAA;IACL,CAAC;IACD,OAAO,IAAI,CAAA;AACf,CAAC;AAED,SAAS,YAAY,CAAC,KAAyB,EAAE,WAAmB;IAChE,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,WAAW,CAAA;AAClD,CAAC;AAED;IA8BI,yCACa,QAAiB,EAC1B,MAAoC;QAFxC,iBAMC;QALY,aAAQ,GAAR,QAAQ,CAAS;QA3BtB,YAAO,GAAyB,EAAE,CAAA;QAKlC,mBAAc,GAAG,UAAC,gBAA6E,IAAK,OAAA,CAAC;YACzG,4BAA4B,EAAE,EAAE;YAChC,mBAAmB,EAAE,GAAG;YACxB,6BAA6B,EAAE,GAAG;YAClC,qBAAqB,EAAE,IAAI;YAC3B,WAAW,EAAE,gBAAgB;SAChC,CAAC,EAN0G,CAM1G,CAAA;QA+DM,aAAQ,GAAG,UAAC,KAAY;YAC5B,IAAM,KAAK,GAAG,OAAO,CAAC,KAAmB,CAAC,CAAA;YAC1C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC9C,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAC5B,CAAC;YAED,IAAI,KAAI,CAAC,OAAO,CAAC,MAAM,IAAI,WAAW,CAAC,KAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC;gBAC5D,KAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC,UAAU,CAAC;oBAChD,KAAI,CAAC,YAAY,EAAE,CAAA;gBACvB,CAAC,EAAE,IAAI,CAAC,CAAA;YACZ,CAAC;QACL,CAAC,CAAA;QAaO,cAAS,GAAG;YAChB,IAAM,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;YAC/B,sBAAsB;YACtB,IAAI,YAAY,GAAG,EAAE,KAAK,CAAC,EAAE,CAAC;gBAC1B,oDAAoD;gBACpD,2CAA2C;gBAC3C,2BAA2B;gBAC3B,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,KAAK;oBACvB,IAAI,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE,CAAC;wBACnC,KAAK,CAAC,aAAa,GAAG,YAAY,GAAG,KAAK,CAAC,SAAS,CAAA;oBACxD,CAAC;gBACL,CAAC,CAAC,CAAA;YACN,CAAC;QACL,CAAC,CAAA;QAMO,uBAAkB,GAAG;YACzB,KAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAC3C,CAAC,CAAA;QAzFG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAA;QAC5C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAA;IAC9C,CAAC;IAnBO,0DAAgB,GAAxB,UAAyB,cAA4C;;QACjE,IAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,WAAW,KAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;QAC3G,OAAO;YACH,4BAA4B,EACxB,MAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,4BAA4B,mCAAI,aAAa,CAAC,4BAA4B;YAC9F,mBAAmB,EAAE,MAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,mBAAmB,mCAAI,aAAa,CAAC,mBAAmB;YAC7F,6BAA6B,EACzB,MAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,6BAA6B,mCAAI,aAAa,CAAC,6BAA6B;YAChG,qBAAqB,EAAE,MAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,qBAAqB,mCAAI,aAAa,CAAC,qBAAqB;YACnG,WAAW,EAAE,aAAa,CAAC,WAAW;SACzC,CAAA;IACL,CAAC;IAUD,+CAAK,GAAL,UAAM,cAAoB;QACtB,IAAI,CAAC,mBAAmB,EAAE,CAAA;QAC1B,IAAI,CAAC,oBAAoB,EAAE,CAAA;QAC3B,IAAI,CAAC,8BAA8B,EAAE,CAAA;QACrC,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAA;IAC/C,CAAC;IAEO,gEAAsB,GAA9B,UAA+B,cAAoB;QAAnD,iBAaC;QAZG,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC1B,IAAM,sBAAsB,GAAG,uCAAuC,CAAC,gBAAgB,CAAC,CAAA;YACxF,IAAI,CAAC,iBAAiB,GAAG,IAAI,sBAAsB,CAAC,UAAC,SAAS;gBAC1D,KAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAA;YAC9B,CAAC,CAAC,CAAA;YACF,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,cAAc,EAAE;gBAC3C,UAAU,EAAE,IAAI;gBAChB,aAAa,EAAE,IAAI;gBACnB,SAAS,EAAE,IAAI;gBACf,OAAO,EAAE,IAAI;aAChB,CAAC,CAAA;QACN,CAAC;IACL,CAAC;IAED,8CAAI,GAAJ;;QACI,MAAA,IAAI,CAAC,iBAAiB,0CAAE,UAAU,EAAE,CAAA;QACpC,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAA;QAClC,gBAAgB,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;QAC5D,gBAAgB,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAA;QACjF,gBAAgB,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAA;IACpF,CAAC;IAED,6DAA6D;IACrD,oDAAU,GAAlB,UAAmB,UAA4B;QAC3C,uEAAuE;QACvE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;IACnC,CAAC;IAEO,6DAAmB,GAA3B;QACI,gBAAgB,CAAC,gBAAgB,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;IAC9D,CAAC;IAeD,iFAAiF;IACjF,mCAAmC;IACnC,+FAA+F;IAC/F,EAAE;IACF,6GAA6G;IAC7G,gHAAgH;IAChH,4FAA4F;IACpF,8DAAoB,GAA5B;QACI,gBAAgB,CAAC,gBAAgB,EAAE,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAA;IACnF,CAAC;IAiBO,wEAA8B,GAAtC;QACI,gBAAgB,CAAC,gBAAgB,EAAE,iBAAiB,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAA;IAClF,CAAC;IAMO,sDAAY,GAApB,UAAqB,KAAgC;QACjD,IAAI,CAAC,KAAK,EAAE,CAAC;YACT,OAAO,IAAI,CAAA;QACf,CAAC;QAED,IAAI,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;YACjC,OAAO,IAAI,CAAA;QACf,CAAC;QAED,IAAM,0BAA0B,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAC,CAAC;YACnD,OAAO,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,IAAI,CAAA;QAClF,CAAC,CAAC,CAAA;QAEF,IAAI,0BAA0B,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAA;QACf,CAAC;QAED,IACI,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC;YACzB,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC;YAC1B,6BAA6B,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,EAC1E,CAAC;YACC,OAAO,IAAI,CAAA;QACf,CAAC;QAED,OAAO,KAAK,CAAA;IAChB,CAAC;IAEO,sDAAY,GAApB;;QAAA,iBAiEC;;QAhEG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;YACvB,OAAM;QACV,CAAC;QAED,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;QACnC,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAA;QAEjC,IAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAA;QAClC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAA;;YAEjB,KAAoB,IAAA,kBAAA,SAAA,aAAa,CAAA,4CAAA,uEAAE,CAAC;gBAA/B,IAAM,KAAK,0BAAA;gBACZ,KAAK,CAAC,eAAe;oBACjB,MAAA,KAAK,CAAC,eAAe,mCACrB,CAAC,IAAI,CAAC,aAAa,IAAI,KAAK,CAAC,SAAS,IAAI,IAAI,CAAC,aAAa;wBACxD,CAAC,CAAC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,SAAS;wBACtC,CAAC,CAAC,SAAS,CAAC,CAAA;gBACpB,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,SAAS,CAAA;gBACpD,KAAK,CAAC,uBAAuB;oBACzB,IAAI,CAAC,qBAAqB,IAAI,KAAK,CAAC,SAAS,IAAI,IAAI,CAAC,qBAAqB;wBACvE,CAAC,CAAC,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC,SAAS;wBAC9C,CAAC,CAAC,SAAS,CAAA;gBAEnB,IAAM,aAAa,GAAG,YAAY,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAA;gBACzF,IAAM,uBAAuB,GAAG,YAAY,CACxC,KAAK,CAAC,uBAAuB,EAC7B,IAAI,CAAC,OAAO,CAAC,6BAA6B,CAC7C,CAAA;gBACD,IAAM,eAAe,GAAG,YAAY,CAAC,KAAK,CAAC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAA;gBAC/F,mEAAmE;gBACnE,oGAAoG;gBACpG,IAAM,eAAe,GAAG,YAAY,CAAC,KAAK,CAAC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,qBAAqB,GAAG,GAAG,CAAC,CAAA;gBAErG,IAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAA;gBACzG,IAAM,WAAW,GACb,QAAQ,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAA;gBACjG,IAAM,kBAAkB,GACpB,QAAQ,CAAC,KAAK,CAAC,uBAAuB,CAAC;oBACvC,KAAK,CAAC,uBAAuB,GAAG,IAAI,CAAC,OAAO,CAAC,6BAA6B,CAAA;gBAE9E,IAAI,SAAS,IAAI,WAAW,IAAI,kBAAkB,EAAE,CAAC;oBACjD,8CAA8C;oBAC9C,SAAQ;gBACZ,CAAC;gBAED,IAAI,aAAa,IAAI,eAAe,IAAI,eAAe,IAAI,uBAAuB,EAAE,CAAC;oBACjF,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE;wBACnB,mCAAmC,EAAE,IAAI,CAAC,aAAa;wBACvD,2BAA2B,EAAE,KAAK,CAAC,SAAS;wBAC5C,0BAA0B,EAAE,aAAa;wBACzC,4BAA4B,EAAE,eAAe;wBAC7C,4BAA4B,EAAE,eAAe;wBAC7C,qCAAqC,EAAE,uBAAuB;qBACjE,CAAC,CAAA;gBACN,CAAC;qBAAM,IAAI,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC;oBACpE,gCAAgC;oBAChC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;gBAC5B,CAAC;YACL,CAAC;;;;;;;;;QAED,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC;YAC5D,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC,UAAU,CAAC;gBAChD,KAAI,CAAC,YAAY,EAAE,CAAA;YACvB,CAAC,EAAE,IAAI,CAAC,CAAA;QACZ,CAAC;IACL,CAAC;IAEO,2DAAiB,GAAzB,UAA0B,KAAyB,EAAE,UAAsB;QACvE,8DAA8D;QAC9D,2BAA2B;QAC3B,IAAI,CAAC,QAAQ,CAAC,OAAO,CACjB,aAAa,iCAEN,UAAU,GACV,+BAA+B,CAAC,KAAK,CAAC,IAAI,EAAE;YAC3C,CAAC,EAAE,KAAK,CAAC,aAAa;YACtB,wBAAwB,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,2BAA2B;YAC1E,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa;YAC/C,0BAA0B,EAAE,IAAI,CAAC,OAAO,CAAC,4BAA4B;YACrE,oHAAoH;YACpH,qBAAqB,EAAE,KAAK;SAC/B,CAAC,CAAC,KAAK,KACR,2BAA2B,EAAE,KAAK,CAAC,aAAa,EAChD,6BAA6B,EAAE,KAAK,CAAC,eAAe,EACpD,6BAA6B,EAAE,KAAK,CAAC,eAAe,EACpD,sCAAsC,EAAE,KAAK,CAAC,uBAAuB,KAEzE;YACI,SAAS,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;SACvC,CACJ,CAAA;IACL,CAAC;IACL,sCAAC;AAAD,CAAC,AArPD,IAqPC;AAED,gBAAgB,CAAC,qBAAqB,GAAG,gBAAgB,CAAC,qBAAqB,IAAI,EAAE,CAAA;AACrF,gBAAgB,CAAC,qBAAqB,CAAC,yBAAyB,GAAG,UAAC,EAAE,EAAE,MAAM;IAC1E,OAAA,IAAI,+BAA+B,CAAC,EAAE,EAAE,MAAM,CAAC;AAA/C,CAA+C,CAAA;AAEnD,eAAe,+BAA+B,CAAA","sourcesContent":["import { assignableWindow, LazyLoadedDeadClicksAutocaptureInterface } from '../utils/globals'\nimport { PostHog } from '../posthog-core'\nimport { isNull, isNumber, isUndefined } from '../utils/type-utils'\nimport { autocaptureCompatibleElements, getEventTarget } from '../autocapture-utils'\nimport { DeadClickCandidate, DeadClicksAutoCaptureConfig, Properties } from '../types'\nimport { autocapturePropertiesForElement } from '../autocapture'\nimport { isElementInToolbar, isElementNode, isTag } from '../utils/element-utils'\nimport { getNativeMutationObserverImplementation } from '../utils/prototype-utils'\nimport { addEventListener } from '../utils'\n\nfunction asClick(event: MouseEvent): DeadClickCandidate | null {\n    const eventTarget = getEventTarget(event)\n    if (eventTarget) {\n        return {\n            node: eventTarget,\n            originalEvent: event,\n            timestamp: Date.now(),\n        }\n    }\n    return null\n}\n\nfunction checkTimeout(value: number | undefined, thresholdMs: number) {\n    return isNumber(value) && value >= thresholdMs\n}\n\nclass LazyLoadedDeadClicksAutocapture implements LazyLoadedDeadClicksAutocaptureInterface {\n    private _mutationObserver: MutationObserver | undefined\n    private _lastMutation: number | undefined\n    private _lastSelectionChanged: number | undefined\n    private _clicks: DeadClickCandidate[] = []\n    private _checkClickTimer: number | undefined\n    private _config: Required<DeadClicksAutoCaptureConfig>\n    private _onCapture: (click: DeadClickCandidate, properties: Properties) => void\n\n    private _defaultConfig = (defaultOnCapture: (click: DeadClickCandidate, properties: Properties) => void) => ({\n        element_attribute_ignorelist: [],\n        scroll_threshold_ms: 100,\n        selection_change_threshold_ms: 100,\n        mutation_threshold_ms: 2500,\n        __onCapture: defaultOnCapture,\n    })\n\n    private asRequiredConfig(providedConfig?: DeadClicksAutoCaptureConfig): Required<DeadClicksAutoCaptureConfig> {\n        const defaultConfig = this._defaultConfig(providedConfig?.__onCapture || this._captureDeadClick.bind(this))\n        return {\n            element_attribute_ignorelist:\n                providedConfig?.element_attribute_ignorelist ?? defaultConfig.element_attribute_ignorelist,\n            scroll_threshold_ms: providedConfig?.scroll_threshold_ms ?? defaultConfig.scroll_threshold_ms,\n            selection_change_threshold_ms:\n                providedConfig?.selection_change_threshold_ms ?? defaultConfig.selection_change_threshold_ms,\n            mutation_threshold_ms: providedConfig?.mutation_threshold_ms ?? defaultConfig.mutation_threshold_ms,\n            __onCapture: defaultConfig.__onCapture,\n        }\n    }\n\n    constructor(\n        readonly instance: PostHog,\n        config?: DeadClicksAutoCaptureConfig\n    ) {\n        this._config = this.asRequiredConfig(config)\n        this._onCapture = this._config.__onCapture\n    }\n\n    start(observerTarget: Node) {\n        this._startClickObserver()\n        this._startScrollObserver()\n        this._startSelectionChangedObserver()\n        this._startMutationObserver(observerTarget)\n    }\n\n    private _startMutationObserver(observerTarget: Node) {\n        if (!this._mutationObserver) {\n            const NativeMutationObserver = getNativeMutationObserverImplementation(assignableWindow)\n            this._mutationObserver = new NativeMutationObserver((mutations) => {\n                this.onMutation(mutations)\n            })\n            this._mutationObserver.observe(observerTarget, {\n                attributes: true,\n                characterData: true,\n                childList: true,\n                subtree: true,\n            })\n        }\n    }\n\n    stop() {\n        this._mutationObserver?.disconnect()\n        this._mutationObserver = undefined\n        assignableWindow.removeEventListener('click', this._onClick)\n        assignableWindow.removeEventListener('scroll', this._onScroll, { capture: true })\n        assignableWindow.removeEventListener('selectionchange', this._onSelectionChange)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private onMutation(_mutations: MutationRecord[]): void {\n        // we don't actually care about the content of the mutations, right now\n        this._lastMutation = Date.now()\n    }\n\n    private _startClickObserver() {\n        addEventListener(assignableWindow, 'click', this._onClick)\n    }\n\n    private _onClick = (event: Event): void => {\n        const click = asClick(event as MouseEvent)\n        if (!isNull(click) && !this._ignoreClick(click)) {\n            this._clicks.push(click)\n        }\n\n        if (this._clicks.length && isUndefined(this._checkClickTimer)) {\n            this._checkClickTimer = assignableWindow.setTimeout(() => {\n                this._checkClicks()\n            }, 1000)\n        }\n    }\n\n    // `capture: true` is required to get scroll events for other scrollable elements\n    // on the page, not just the window\n    // see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#usecapture\n    //\n    // `passive: true` is used to tell the browser that the scroll event handler will not call `preventDefault()`\n    // This allows the browser to optimize scrolling performance by not waiting for our handling of the scroll event\n    // see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#passive\n    private _startScrollObserver() {\n        addEventListener(assignableWindow, 'scroll', this._onScroll, { capture: true })\n    }\n\n    private _onScroll = (): void => {\n        const candidateNow = Date.now()\n        // very naive throttle\n        if (candidateNow % 50 === 0) {\n            // we can see many scrolls between scheduled checks,\n            // so we update scroll delay as we see them\n            // to avoid false positives\n            this._clicks.forEach((click) => {\n                if (isUndefined(click.scrollDelayMs)) {\n                    click.scrollDelayMs = candidateNow - click.timestamp\n                }\n            })\n        }\n    }\n\n    private _startSelectionChangedObserver() {\n        addEventListener(assignableWindow, 'selectionchange', this._onSelectionChange)\n    }\n\n    private _onSelectionChange = (): void => {\n        this._lastSelectionChanged = Date.now()\n    }\n\n    private _ignoreClick(click: DeadClickCandidate | null): boolean {\n        if (!click) {\n            return true\n        }\n\n        if (isElementInToolbar(click.node)) {\n            return true\n        }\n\n        const alreadyClickedInLastSecond = this._clicks.some((c) => {\n            return c.node === click.node && Math.abs(c.timestamp - click.timestamp) < 1000\n        })\n\n        if (alreadyClickedInLastSecond) {\n            return true\n        }\n\n        if (\n            isTag(click.node, 'html') ||\n            !isElementNode(click.node) ||\n            autocaptureCompatibleElements.includes(click.node.tagName.toLowerCase())\n        ) {\n            return true\n        }\n\n        return false\n    }\n\n    private _checkClicks() {\n        if (!this._clicks.length) {\n            return\n        }\n\n        clearTimeout(this._checkClickTimer)\n        this._checkClickTimer = undefined\n\n        const clicksToCheck = this._clicks\n        this._clicks = []\n\n        for (const click of clicksToCheck) {\n            click.mutationDelayMs =\n                click.mutationDelayMs ??\n                (this._lastMutation && click.timestamp <= this._lastMutation\n                    ? this._lastMutation - click.timestamp\n                    : undefined)\n            click.absoluteDelayMs = Date.now() - click.timestamp\n            click.selectionChangedDelayMs =\n                this._lastSelectionChanged && click.timestamp <= this._lastSelectionChanged\n                    ? this._lastSelectionChanged - click.timestamp\n                    : undefined\n\n            const scrollTimeout = checkTimeout(click.scrollDelayMs, this._config.scroll_threshold_ms)\n            const selectionChangedTimeout = checkTimeout(\n                click.selectionChangedDelayMs,\n                this._config.selection_change_threshold_ms\n            )\n            const mutationTimeout = checkTimeout(click.mutationDelayMs, this._config.mutation_threshold_ms)\n            // we want to timeout eventually even if nothing else catches it...\n            // we leave a little longer than the maximum threshold to give the other checks a chance to catch it\n            const absoluteTimeout = checkTimeout(click.absoluteDelayMs, this._config.mutation_threshold_ms * 1.1)\n\n            const hadScroll = isNumber(click.scrollDelayMs) && click.scrollDelayMs < this._config.scroll_threshold_ms\n            const hadMutation =\n                isNumber(click.mutationDelayMs) && click.mutationDelayMs < this._config.mutation_threshold_ms\n            const hadSelectionChange =\n                isNumber(click.selectionChangedDelayMs) &&\n                click.selectionChangedDelayMs < this._config.selection_change_threshold_ms\n\n            if (hadScroll || hadMutation || hadSelectionChange) {\n                // ignore clicks that had a scroll or mutation\n                continue\n            }\n\n            if (scrollTimeout || mutationTimeout || absoluteTimeout || selectionChangedTimeout) {\n                this._onCapture(click, {\n                    $dead_click_last_mutation_timestamp: this._lastMutation,\n                    $dead_click_event_timestamp: click.timestamp,\n                    $dead_click_scroll_timeout: scrollTimeout,\n                    $dead_click_mutation_timeout: mutationTimeout,\n                    $dead_click_absolute_timeout: absoluteTimeout,\n                    $dead_click_selection_changed_timeout: selectionChangedTimeout,\n                })\n            } else if (click.absoluteDelayMs < this._config.mutation_threshold_ms) {\n                // keep waiting until next check\n                this._clicks.push(click)\n            }\n        }\n\n        if (this._clicks.length && isUndefined(this._checkClickTimer)) {\n            this._checkClickTimer = assignableWindow.setTimeout(() => {\n                this._checkClicks()\n            }, 1000)\n        }\n    }\n\n    private _captureDeadClick(click: DeadClickCandidate, properties: Properties) {\n        // TODO need to check safe and captur-able as with autocapture\n        // TODO autocaputure config\n        this.instance.capture(\n            '$dead_click',\n            {\n                ...properties,\n                ...autocapturePropertiesForElement(click.node, {\n                    e: click.originalEvent,\n                    maskAllElementAttributes: this.instance.config.mask_all_element_attributes,\n                    maskAllText: this.instance.config.mask_all_text,\n                    elementAttributeIgnoreList: this._config.element_attribute_ignorelist,\n                    // TRICKY: it appears that we were moving to elementsChainAsString, but the UI still depends on elements, so :shrug:\n                    elementsChainAsString: false,\n                }).props,\n                $dead_click_scroll_delay_ms: click.scrollDelayMs,\n                $dead_click_mutation_delay_ms: click.mutationDelayMs,\n                $dead_click_absolute_delay_ms: click.absoluteDelayMs,\n                $dead_click_selection_changed_delay_ms: click.selectionChangedDelayMs,\n            },\n            {\n                timestamp: new Date(click.timestamp),\n            }\n        )\n    }\n}\n\nassignableWindow.__PosthogExtensions__ = assignableWindow.__PosthogExtensions__ || {}\nassignableWindow.__PosthogExtensions__.initDeadClicksAutocapture = (ph, config) =>\n    new LazyLoadedDeadClicksAutocapture(ph, config)\n\nexport default LazyLoadedDeadClicksAutocapture\n"]}