{"version":3,"file":"autocapture.js","sourceRoot":"","sources":["../../src/autocapture.ts"],"names":[],"mappings":"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","sourcesContent":["import { addEventListener, each, extend } from './utils'\nimport {\n    autocaptureCompatibleElements,\n    getClassNames,\n    getDirectAndNestedSpanText,\n    getElementsChainString,\n    getEventTarget,\n    getSafeText,\n    isAngularStyleAttr,\n    isSensitiveElement,\n    makeSafeText,\n    shouldCaptureDomEvent,\n    shouldCaptureElement,\n    shouldCaptureValue,\n    splitClassString,\n} from './autocapture-utils'\nimport RageClick from './extensions/rageclick'\nimport { AutocaptureConfig, COPY_AUTOCAPTURE_EVENT, EventName, Properties, RemoteConfig } from './types'\nimport { PostHog } from './posthog-core'\nimport { AUTOCAPTURE_DISABLED_SERVER_SIDE } from './constants'\n\nimport { isBoolean, isFunction, isNull, isObject } from './utils/type-utils'\nimport { createLogger } from './utils/logger'\nimport { document, window } from './utils/globals'\nimport { convertToURL } from './utils/request-utils'\nimport { isDocumentFragment, isElementNode, isTag, isTextNode } from './utils/element-utils'\nimport { includes } from './utils/string-utils'\n\nconst logger = createLogger('[AutoCapture]')\n\nfunction limitText(length: number, text: string): string {\n    if (text.length > length) {\n        return text.slice(0, length) + '...'\n    }\n    return text\n}\n\nexport function getAugmentPropertiesFromElement(elem: Element): Properties {\n    const shouldCaptureEl = shouldCaptureElement(elem)\n    if (!shouldCaptureEl) {\n        return {}\n    }\n\n    const props: Properties = {}\n\n    each(elem.attributes, function (attr: Attr) {\n        if (attr.name && attr.name.indexOf('data-ph-capture-attribute') === 0) {\n            const propertyKey = attr.name.replace('data-ph-capture-attribute-', '')\n            const propertyValue = attr.value\n            if (propertyKey && propertyValue && shouldCaptureValue(propertyValue)) {\n                props[propertyKey] = propertyValue\n            }\n        }\n    })\n\n    return props\n}\n\nexport function previousElementSibling(el: Element): Element | null {\n    if (el.previousElementSibling) {\n        return el.previousElementSibling\n    }\n    let _el: Element | null = el\n    do {\n        _el = _el.previousSibling as Element | null // resolves to ChildNode->Node, which is Element's parent class\n    } while (_el && !isElementNode(_el))\n    return _el\n}\n\nexport function getDefaultProperties(eventType: string): Properties {\n    return {\n        $event_type: eventType,\n        $ce_version: 1,\n    }\n}\n\nexport function getPropertiesFromElement(\n    elem: Element,\n    maskAllAttributes: boolean,\n    maskText: boolean,\n    elementAttributeIgnorelist: string[] | undefined\n): Properties {\n    const tag_name = elem.tagName.toLowerCase()\n    const props: Properties = {\n        tag_name: tag_name,\n    }\n    if (autocaptureCompatibleElements.indexOf(tag_name) > -1 && !maskText) {\n        if (tag_name.toLowerCase() === 'a' || tag_name.toLowerCase() === 'button') {\n            props['$el_text'] = limitText(1024, getDirectAndNestedSpanText(elem))\n        } else {\n            props['$el_text'] = limitText(1024, getSafeText(elem))\n        }\n    }\n\n    const classes = getClassNames(elem)\n    if (classes.length > 0)\n        props['classes'] = classes.filter(function (c) {\n            return c !== ''\n        })\n\n    // capture the deny list here because this not-a-class class makes it tricky to use this.config in the function below\n    each(elem.attributes, function (attr: Attr) {\n        // Only capture attributes we know are safe\n        if (isSensitiveElement(elem) && ['name', 'id', 'class', 'aria-label'].indexOf(attr.name) === -1) return\n\n        if (elementAttributeIgnorelist?.includes(attr.name)) return\n\n        if (!maskAllAttributes && shouldCaptureValue(attr.value) && !isAngularStyleAttr(attr.name)) {\n            let value = attr.value\n            if (attr.name === 'class') {\n                // html attributes can _technically_ contain linebreaks,\n                // but we're very intolerant of them in the class string,\n                // so we strip them.\n                value = splitClassString(value).join(' ')\n            }\n            props['attr__' + attr.name] = limitText(1024, value)\n        }\n    })\n\n    let nthChild = 1\n    let nthOfType = 1\n    let currentElem: Element | null = elem\n    while ((currentElem = previousElementSibling(currentElem))) {\n        // eslint-disable-line no-cond-assign\n        nthChild++\n        if (currentElem.tagName === elem.tagName) {\n            nthOfType++\n        }\n    }\n    props['nth_child'] = nthChild\n    props['nth_of_type'] = nthOfType\n\n    return props\n}\n\nexport function autocapturePropertiesForElement(\n    target: Element,\n    {\n        e,\n        maskAllElementAttributes,\n        maskAllText,\n        elementAttributeIgnoreList,\n        elementsChainAsString,\n    }: {\n        e: Event\n        maskAllElementAttributes: boolean\n        maskAllText: boolean\n        elementAttributeIgnoreList?: string[] | undefined\n        elementsChainAsString: boolean\n    }\n): { props: Properties; explicitNoCapture?: boolean } {\n    const targetElementList = [target]\n    let curEl = target\n    while (curEl.parentNode && !isTag(curEl, 'body')) {\n        if (isDocumentFragment(curEl.parentNode)) {\n            targetElementList.push((curEl.parentNode as any).host)\n            curEl = (curEl.parentNode as any).host\n            continue\n        }\n        targetElementList.push(curEl.parentNode as Element)\n        curEl = curEl.parentNode as Element\n    }\n\n    const elementsJson: Properties[] = []\n    const autocaptureAugmentProperties: Properties = {}\n    let href: string | false = false\n    let explicitNoCapture = false\n\n    each(targetElementList, (el) => {\n        const shouldCaptureEl = shouldCaptureElement(el)\n\n        // if the element or a parent element is an anchor tag\n        // include the href as a property\n        if (el.tagName.toLowerCase() === 'a') {\n            href = el.getAttribute('href')\n            href = shouldCaptureEl && href && shouldCaptureValue(href) && href\n        }\n\n        // allow users to programmatically prevent capturing of elements by adding class 'ph-no-capture'\n        const classes = getClassNames(el)\n        if (includes(classes, 'ph-no-capture')) {\n            explicitNoCapture = true\n        }\n\n        elementsJson.push(\n            getPropertiesFromElement(el, maskAllElementAttributes, maskAllText, elementAttributeIgnoreList)\n        )\n\n        const augmentProperties = getAugmentPropertiesFromElement(el)\n        extend(autocaptureAugmentProperties, augmentProperties)\n    })\n\n    if (explicitNoCapture) {\n        return { props: {}, explicitNoCapture }\n    }\n\n    if (!maskAllText) {\n        // if the element is a button or anchor tag get the span text from any\n        // children and include it as/with the text property on the parent element\n        if (target.tagName.toLowerCase() === 'a' || target.tagName.toLowerCase() === 'button') {\n            elementsJson[0]['$el_text'] = getDirectAndNestedSpanText(target)\n        } else {\n            elementsJson[0]['$el_text'] = getSafeText(target)\n        }\n    }\n\n    let externalHref: string | undefined\n    if (href) {\n        elementsJson[0]['attr__href'] = href\n        const hrefHost = convertToURL(href)?.host\n        const locationHost = window?.location?.host\n        if (hrefHost && locationHost && hrefHost !== locationHost) {\n            externalHref = href\n        }\n    }\n\n    const props = extend(\n        getDefaultProperties(e.type),\n        // Sending \"$elements\" is deprecated. Only one client on US cloud uses this.\n        !elementsChainAsString ? { $elements: elementsJson } : {},\n        // Always send $elements_chain, as it's needed downstream in site app filtering\n        { $elements_chain: getElementsChainString(elementsJson) },\n        elementsJson[0]?.['$el_text'] ? { $el_text: elementsJson[0]?.['$el_text'] } : {},\n        externalHref && e.type === 'click' ? { $external_click_url: externalHref } : {},\n        autocaptureAugmentProperties\n    )\n\n    return { props }\n}\n\nexport class Autocapture {\n    instance: PostHog\n    _initialized: boolean = false\n    _isDisabledServerSide: boolean | null = null\n    _elementSelectors: Set<string> | null\n    rageclicks = new RageClick()\n    _elementsChainAsString = false\n\n    constructor(instance: PostHog) {\n        this.instance = instance\n        this._elementSelectors = null\n    }\n\n    private get config(): AutocaptureConfig {\n        const config = isObject(this.instance.config.autocapture) ? this.instance.config.autocapture : {}\n        // precompile the regex\n        config.url_allowlist = config.url_allowlist?.map((url) => new RegExp(url))\n        config.url_ignorelist = config.url_ignorelist?.map((url) => new RegExp(url))\n        return config\n    }\n\n    _addDomEventHandlers(): void {\n        if (!this.isBrowserSupported()) {\n            logger.info('Disabling Automatic Event Collection because this browser is not supported')\n            return\n        }\n\n        if (!window || !document) {\n            return\n        }\n\n        const handler = (e: Event) => {\n            e = e || window?.event\n            try {\n                this._captureEvent(e)\n            } catch (error) {\n                logger.error('Failed to capture event', error)\n            }\n        }\n\n        addEventListener(document, 'submit', handler, { capture: true })\n        addEventListener(document, 'change', handler, { capture: true })\n        addEventListener(document, 'click', handler, { capture: true })\n\n        if (this.config.capture_copied_text) {\n            const copiedTextHandler = (e: Event) => {\n                e = e || window?.event\n                this._captureEvent(e, COPY_AUTOCAPTURE_EVENT)\n            }\n\n            addEventListener(document, 'copy', copiedTextHandler, { capture: true })\n            addEventListener(document, 'cut', copiedTextHandler, { capture: true })\n        }\n    }\n\n    public startIfEnabled() {\n        if (this.isEnabled && !this._initialized) {\n            this._addDomEventHandlers()\n            this._initialized = true\n        }\n    }\n\n    public onRemoteConfig(response: RemoteConfig) {\n        if (response.elementsChainAsString) {\n            this._elementsChainAsString = response.elementsChainAsString\n        }\n\n        if (this.instance.persistence) {\n            this.instance.persistence.register({\n                [AUTOCAPTURE_DISABLED_SERVER_SIDE]: !!response['autocapture_opt_out'],\n            })\n        }\n        // store this in-memory in case persistence is disabled\n        this._isDisabledServerSide = !!response['autocapture_opt_out']\n        this.startIfEnabled()\n    }\n\n    public setElementSelectors(selectors: Set<string>): void {\n        this._elementSelectors = selectors\n    }\n\n    public getElementSelectors(element: Element | null): string[] | null {\n        const elementSelectors: string[] = []\n\n        this._elementSelectors?.forEach((selector) => {\n            const matchedElements = document?.querySelectorAll(selector)\n            matchedElements?.forEach((matchedElement: Element) => {\n                if (element === matchedElement) {\n                    elementSelectors.push(selector)\n                }\n            })\n        })\n\n        return elementSelectors\n    }\n\n    public get isEnabled(): boolean {\n        const persistedServerDisabled = this.instance.persistence?.props[AUTOCAPTURE_DISABLED_SERVER_SIDE]\n        const memoryDisabled = this._isDisabledServerSide\n\n        if (\n            isNull(memoryDisabled) &&\n            !isBoolean(persistedServerDisabled) &&\n            !this.instance.config.advanced_disable_decide\n        ) {\n            // We only enable if we know that the server has not disabled it (unless decide is disabled)\n            return false\n        }\n\n        const disabledServer = this._isDisabledServerSide ?? !!persistedServerDisabled\n        const disabledClient = !this.instance.config.autocapture\n        return !disabledClient && !disabledServer\n    }\n\n    private _captureEvent(e: Event, eventName: EventName = '$autocapture'): boolean | void {\n        if (!this.isEnabled) {\n            return\n        }\n\n        /*** Don't mess with this code without running IE8 tests on it ***/\n        let target = getEventTarget(e)\n        if (isTextNode(target)) {\n            // defeat Safari bug (see: http://www.quirksmode.org/js/events_properties.html)\n            target = (target.parentNode || null) as Element | null\n        }\n\n        if (eventName === '$autocapture' && e.type === 'click' && e instanceof MouseEvent) {\n            if (\n                this.instance.config.rageclick &&\n                this.rageclicks?.isRageClick(e.clientX, e.clientY, new Date().getTime())\n            ) {\n                this._captureEvent(e, '$rageclick')\n            }\n        }\n\n        const isCopyAutocapture = eventName === COPY_AUTOCAPTURE_EVENT\n        if (\n            target &&\n            shouldCaptureDomEvent(\n                target,\n                e,\n                this.config,\n                // mostly this method cares about the target element, but in the case of copy events,\n                // we want some of the work this check does without insisting on the target element's type\n                isCopyAutocapture,\n                // we also don't want to restrict copy checks to clicks,\n                // so we pass that knowledge in here, rather than add the logic inside the check\n                isCopyAutocapture ? ['copy', 'cut'] : undefined\n            )\n        ) {\n            const { props, explicitNoCapture } = autocapturePropertiesForElement(target, {\n                e,\n                maskAllElementAttributes: this.instance.config.mask_all_element_attributes,\n                maskAllText: this.instance.config.mask_all_text,\n                elementAttributeIgnoreList: this.config.element_attribute_ignorelist,\n                elementsChainAsString: this._elementsChainAsString,\n            })\n\n            if (explicitNoCapture) {\n                return false\n            }\n\n            const elementSelectors = this.getElementSelectors(target)\n            if (elementSelectors && elementSelectors.length > 0) {\n                props['$element_selectors'] = elementSelectors\n            }\n\n            if (eventName === COPY_AUTOCAPTURE_EVENT) {\n                // you can't read the data from the clipboard event,\n                // but you can guess that you can read it from the window's current selection\n                const selectedContent = makeSafeText(window?.getSelection()?.toString())\n                const clipType = (e as ClipboardEvent).type || 'clipboard'\n                if (!selectedContent) {\n                    return false\n                }\n                props['$selected_content'] = selectedContent\n                props['$copy_type'] = clipType\n            }\n\n            this.instance.capture(eventName, props)\n            return true\n        }\n    }\n\n    isBrowserSupported(): boolean {\n        return isFunction(document?.querySelectorAll)\n    }\n}\n"]}