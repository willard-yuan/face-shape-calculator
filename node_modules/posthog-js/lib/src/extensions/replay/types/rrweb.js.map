{"version":3,"file":"rrweb.js","sourceRoot":"","sources":["../../../../../src/extensions/replay/types/rrweb.ts"],"names":[],"mappings":"AAAA,qFAAqF;AACrF,kFAAkF;AAClF,oCAAoC;AACpC,EAAE;AACF,oEAAoE;AACpE,qCAAqC;AACrC,EAAE;AACF,gGAAgG;AAChG,+FAA+F;AAC/F,gFAAgF","sourcesContent":["// This file is supposed to replicate some of the types hidden inside `@rrweb/record`\n// to guarantee that our users can use this library - and validate types - without\n// having to install `@rrweb/record`\n//\n// They might still need to install `@rrweb/types` to use this file,\n// but that's a much lighter library.\n//\n// NOTE: This file should be updated and kept in sync with `@rrweb/record` if we ever update it.\n// NOTEÂ²: The initial types are not exported, we're only exporting the two types at the bottom.\n//        They're only here to allow the bottom types to be more easily defined.\n\nimport type {\n    blockClass,\n    eventWithTime,\n    hooksParam,\n    KeepIframeSrcFn,\n    maskTextClass,\n    PackFn,\n    RecordPlugin,\n    SamplingStrategy,\n} from '@rrweb/types'\n\n// Replication of `MaskInputOptions` from inside `@rrweb/record/rrweb-snapshot`\ntype MaskInputOptions = Partial<{\n    color: boolean\n    date: boolean\n    'datetime-local': boolean\n    email: boolean\n    month: boolean\n    number: boolean\n    range: boolean\n    search: boolean\n    tel: boolean\n    text: boolean\n    time: boolean\n    url: boolean\n    week: boolean\n    textarea: boolean\n    select: boolean\n    password: boolean\n}>\n\n// Replication of `MaskInputFn` from inside `@rrweb/record/rrweb-snapshot`\ntype MaskInputFn = (text: string, element: HTMLElement) => string\n\n// Replication of `MaskTextFn` from inside `@rrweb/record/rrweb-snapshot`\ntype MaskTextFn = (text: string, element: HTMLElement | null) => string\n\n// Replication of `SlimDOMOptions` from inside `@rrweb/record/rrweb-snapshot`\ntype SlimDOMOptions = Partial<{\n    script: boolean\n    comment: boolean\n    headFavicon: boolean\n    headWhitespace: boolean\n    headMetaDescKeywords: boolean\n    headMetaSocial: boolean\n    headMetaRobots: boolean\n    headMetaHttpEquiv: boolean\n    headMetaAuthorship: boolean\n    headMetaVerification: boolean\n    headTitleMutations: boolean\n}>\n\n// Replication of `DataURLOptions` from inside `@rrweb/record/rrweb-snapshot`\ntype DataURLOptions = Partial<{\n    type: string\n    quality: number\n}>\n\n// Replication of `ErrorHandler` from inside `@rrweb/record`\ntype ErrorHandler = (error: unknown) => void | boolean\n\n// Replication of `recordOptions` from inside `@rrweb/record`\nexport type recordOptions = {\n    emit?: (e: eventWithTime, isCheckout?: boolean) => void\n    checkoutEveryNth?: number\n    checkoutEveryNms?: number\n    blockClass?: blockClass\n    blockSelector?: string\n    ignoreClass?: string\n    ignoreSelector?: string\n    maskTextClass?: maskTextClass\n    maskTextSelector?: string\n    maskAllInputs?: boolean\n    maskInputOptions?: MaskInputOptions\n    maskInputFn?: MaskInputFn\n    maskTextFn?: MaskTextFn\n    slimDOMOptions?: SlimDOMOptions | 'all' | true\n    ignoreCSSAttributes?: Set<string>\n    inlineStylesheet?: boolean\n    hooks?: hooksParam\n    packFn?: PackFn\n    sampling?: SamplingStrategy\n    dataURLOptions?: DataURLOptions\n    recordDOM?: boolean\n    recordCanvas?: boolean\n    recordCrossOriginIframes?: boolean\n    recordAfter?: 'DOMContentLoaded' | 'load'\n    userTriggeredOnInput?: boolean\n    collectFonts?: boolean\n    inlineImages?: boolean\n    plugins?: RecordPlugin[]\n    mousemoveWait?: number\n    keepIframeSrcFn?: KeepIframeSrcFn\n    errorHandler?: ErrorHandler\n}\n\n// Replication of `record` from inside `@rrweb/record`\nexport type rrwebRecord = {\n    (options: recordOptions): () => void\n    addCustomEvent: (tag: string, payload: any) => void\n    takeFullSnapshot: () => void\n    mirror: {\n        getId(n: Node | undefined | null): number\n        getNode(id: number): Node | null\n    }\n}\n"]}