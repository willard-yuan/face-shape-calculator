{"version":3,"file":"chunk-ids.js","sourceRoot":"","sources":["../../../../src/extensions/exception-autocapture/chunk-ids.ts"],"names":[],"mappings":"AAOA,IAAI,kBAAiE,CAAA;AACrE,IAAI,aAAiC,CAAA;AACrC,IAAI,sBAAkD,CAAA;AAEtD,MAAM,UAAU,uBAAuB,CAAC,WAAwB;IAC5D,IAAM,UAAU,GAAI,UAAkB,CAAC,gBAA8C,CAAA;IACrF,IAAI,CAAC,UAAU,EAAE,CAAC;QACd,OAAO,EAAE,CAAA;IACb,CAAC;IAED,IAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;IAE3C,IAAI,sBAAsB,IAAI,WAAW,CAAC,MAAM,KAAK,aAAa,EAAE,CAAC;QACjE,OAAO,sBAAsB,CAAA;IACjC,CAAC;IAED,aAAa,GAAG,WAAW,CAAC,MAAM,CAAA;IAElC,sBAAsB,GAAG,WAAW,CAAC,MAAM,CAAyB,UAAC,GAAG,EAAE,QAAQ;QAC9E,IAAI,CAAC,kBAAkB,EAAE,CAAC;YACtB,kBAAkB,GAAG,EAAE,CAAA;QAC3B,CAAC;QAED,IAAM,MAAM,GAAG,kBAAkB,CAAC,QAAQ,CAAC,CAAA;QAE3C,IAAI,MAAM,EAAE,CAAC;YACT,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;QAC9B,CAAC;aAAM,CAAC;YACJ,IAAM,WAAW,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAA;YAEzC,KAAK,IAAI,CAAC,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC/C,IAAM,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC,CAAA;gBACjC,IAAM,QAAQ,GAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,QAAQ,CAAA;gBACrC,IAAM,OAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAA;gBAEpC,IAAI,QAAQ,IAAI,OAAO,EAAE,CAAC;oBACtB,GAAG,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAA;oBACvB,kBAAkB,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAA;oBAClD,MAAK;gBACT,CAAC;YACL,CAAC;QACL,CAAC;QAED,OAAO,GAAG,CAAA;IACd,CAAC,EAAE,EAAE,CAAC,CAAA;IAEN,OAAO,sBAAsB,CAAA;AACjC,CAAC","sourcesContent":["import type { StackParser } from './stack-trace'\n\ntype StackString = string\ntype CachedResult = [string, string]\n\ntype ChunkIdMapType = Record<string, string>\n\nlet parsedStackResults: Record<StackString, CachedResult> | undefined\nlet lastKeysCount: number | undefined\nlet cachedFilenameChunkIds: ChunkIdMapType | undefined\n\nexport function getFilenameToChunkIdMap(stackParser: StackParser): ChunkIdMapType {\n    const chunkIdMap = (globalThis as any)._posthogChunkIds as ChunkIdMapType | undefined\n    if (!chunkIdMap) {\n        return {}\n    }\n\n    const chunkIdKeys = Object.keys(chunkIdMap)\n\n    if (cachedFilenameChunkIds && chunkIdKeys.length === lastKeysCount) {\n        return cachedFilenameChunkIds\n    }\n\n    lastKeysCount = chunkIdKeys.length\n\n    cachedFilenameChunkIds = chunkIdKeys.reduce<Record<string, string>>((acc, stackKey) => {\n        if (!parsedStackResults) {\n            parsedStackResults = {}\n        }\n\n        const result = parsedStackResults[stackKey]\n\n        if (result) {\n            acc[result[0]] = result[1]\n        } else {\n            const parsedStack = stackParser(stackKey)\n\n            for (let i = parsedStack.length - 1; i >= 0; i--) {\n                const stackFrame = parsedStack[i]\n                const filename = stackFrame?.filename\n                const chunkId = chunkIdMap[stackKey]\n\n                if (filename && chunkId) {\n                    acc[filename] = chunkId\n                    parsedStackResults[stackKey] = [filename, chunkId]\n                    break\n                }\n            }\n        }\n\n        return acc\n    }, {})\n\n    return cachedFilenameChunkIds\n}\n"]}