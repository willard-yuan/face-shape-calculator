{"version":3,"file":"posthog-core.js","sourceRoot":"","sources":["../../src/posthog-core.ts"],"names":[],"mappings":"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","sourcesContent":["import { Autocapture } from './autocapture'\nimport Config from './config'\nimport { ConsentManager } from './consent'\nimport {\n    ALIAS_ID_KEY,\n    COOKIELESS_MODE_FLAG_PROPERTY,\n    COOKIELESS_SENTINEL_VALUE,\n    ENABLE_PERSON_PROCESSING,\n    FLAG_CALL_REPORTED,\n    PEOPLE_DISTINCT_ID_KEY,\n    SURVEYS_REQUEST_TIMEOUT_MS,\n    USER_STATE,\n} from './constants'\nimport { DeadClicksAutocapture, isDeadClicksEnabledForAutocapture } from './extensions/dead-clicks-autocapture'\nimport { ExceptionObserver } from './extensions/exception-autocapture'\nimport { SessionRecording } from './extensions/replay/sessionrecording'\nimport { setupSegmentIntegration } from './extensions/segment-integration'\nimport { SentryIntegration, sentryIntegration, SentryIntegrationOptions } from './extensions/sentry-integration'\nimport { Toolbar } from './extensions/toolbar'\nimport { TracingHeaders } from './extensions/tracing-headers'\nimport { WebVitalsAutocapture } from './extensions/web-vitals'\nimport { Heatmaps } from './heatmaps'\nimport { PageViewManager } from './page-view'\nimport { PostHogExceptions } from './posthog-exceptions'\nimport { PostHogFeatureFlags } from './posthog-featureflags'\nimport { PostHogPersistence } from './posthog-persistence'\nimport { PostHogSurveys } from './posthog-surveys'\nimport { SurveyCallback } from './posthog-surveys-types'\nimport { RateLimiter } from './rate-limiter'\nimport { RemoteConfigLoader } from './remote-config'\nimport { extendURLParams, request, SUPPORTS_REQUEST } from './request'\nimport { DEFAULT_FLUSH_INTERVAL_MS, RequestQueue } from './request-queue'\nimport { RetryQueue } from './retry-queue'\nimport { ScrollManager } from './scroll-manager'\nimport { SessionPropsManager } from './session-props'\nimport { SessionIdManager } from './sessionid'\nimport { SiteApps } from './site-apps'\nimport { localStore } from './storage'\nimport {\n    CaptureOptions,\n    CaptureResult,\n    Compression,\n    EarlyAccessFeatureCallback,\n    EarlyAccessFeatureStage,\n    EventName,\n    FeatureFlagsCallback,\n    JsonType,\n    PostHogConfig,\n    Properties,\n    Property,\n    QueuedRequestWithOptions,\n    RemoteConfig,\n    RequestCallback,\n    SessionIdChangedCallback,\n    SnippetArrayItem,\n    ToolbarParams,\n} from './types'\nimport {\n    _copyAndTruncateStrings,\n    addEventListener,\n    each,\n    eachArray,\n    extend,\n    isCrossDomainCookie,\n    safewrapClass,\n} from './utils'\nimport { isLikelyBot } from './utils/blocked-uas'\nimport { Info } from './utils/event-utils'\nimport { assignableWindow, document, location, navigator, userAgent, window } from './utils/globals'\nimport { getIdentifyHash } from './utils/identify-utils'\nimport { logger } from './utils/logger'\nimport { RequestRouter, RequestRouterRegion } from './utils/request-router'\nimport { SimpleEventEmitter } from './utils/simple-event-emitter'\nimport { includes, isDistinctIdStringLike } from './utils/string-utils'\nimport {\n    isArray,\n    isEmptyObject,\n    isEmptyString,\n    isError,\n    isFunction,\n    isKnownUnsafeEditableEvent,\n    isNullish,\n    isNumber,\n    isObject,\n    isString,\n    isUndefined,\n} from './utils/type-utils'\nimport { uuidv7 } from './uuidv7'\nimport { WebExperiments } from './web-experiments'\n\n/*\nSIMPLE STYLE GUIDE:\n\nthis.x === public function\nthis._x === internal - only use within this file\nthis.__x === private - only use within the class\n\nGlobals should be all caps\n*/\n\n/* posthog.init is called with `Partial<PostHogConfig>`\n * and we want to ensure that only valid keys are passed to the config object.\n * TypeScript does not enforce that the object passed does not have extra keys.\n * So someone can call with { bootstrap: { distinctId: '123'} }\n * which is not a valid key. They should have passed distinctID (upper case D).\n * That's a really tricky mistake to spot.\n * The OnlyValidKeys type ensures that only keys that are valid in the PostHogConfig type are allowed.\n */\ntype OnlyValidKeys<T, Shape> = T extends Shape ? (Exclude<keyof T, keyof Shape> extends never ? T : never) : never\n\nconst instances: Record<string, PostHog> = {}\n\n// some globals for comparisons\nconst __NOOP = () => {}\n\nconst PRIMARY_INSTANCE_NAME = 'posthog'\n\n/*\n * Dynamic... constants? Is that an oxymoron?\n */\n// http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/\n// https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#withCredentials\n\n// IE<10 does not support cross-origin XHR's but script tags\n// with defer won't block window.onload; ENQUEUE_REQUESTS\n// should only be true for Opera<12\nlet ENQUEUE_REQUESTS = !SUPPORTS_REQUEST && userAgent?.indexOf('MSIE') === -1 && userAgent?.indexOf('Mozilla') === -1\n\n// NOTE: Remember to update `types.ts` when changing a default value\n// to guarantee documentation is up to date, make sure to also update our website docs\n// NOTE²: This shouldn't ever change because we try very hard to be backwards-compatible\nexport const defaultConfig = (): PostHogConfig => ({\n    api_host: 'https://us.i.posthog.com',\n    ui_host: null,\n    token: '',\n    autocapture: true,\n    rageclick: true,\n    cross_subdomain_cookie: isCrossDomainCookie(document?.location),\n    persistence: 'localStorage+cookie', // up to 1.92.0 this was 'cookie'. It's easy to migrate as 'localStorage+cookie' will migrate data from cookie storage\n    persistence_name: '',\n    loaded: __NOOP,\n    save_campaign_params: true,\n    custom_campaign_params: [],\n    custom_blocked_useragents: [],\n    save_referrer: true,\n    capture_pageview: true,\n    capture_pageleave: 'if_capture_pageview', // We'll only capture pageleave events if capture_pageview is also true\n    debug: (location && isString(location?.search) && location.search.indexOf('__posthog_debug=true') !== -1) || false,\n    cookie_expiration: 365,\n    upgrade: false,\n    disable_session_recording: false,\n    disable_persistence: false,\n    disable_web_experiments: true, // disabled in beta.\n    disable_surveys: false,\n    disable_external_dependency_loading: false,\n    enable_recording_console_log: undefined, // When undefined, it falls back to the server-side setting\n    secure_cookie: window?.location?.protocol === 'https:',\n    ip: true,\n    opt_out_capturing_by_default: false,\n    opt_out_persistence_by_default: false,\n    opt_out_useragent_filter: false,\n    opt_out_capturing_persistence_type: 'localStorage',\n    opt_out_capturing_cookie_prefix: null,\n    opt_in_site_apps: false,\n    property_denylist: [],\n    respect_dnt: false,\n    sanitize_properties: null,\n    request_headers: {}, // { header: value, header2: value }\n    request_batching: true,\n    properties_string_max_length: 65535,\n    session_recording: {},\n    mask_all_element_attributes: false,\n    mask_all_text: false,\n    mask_personal_data_properties: false,\n    custom_personal_data_properties: [],\n    advanced_disable_decide: false,\n    advanced_disable_feature_flags: false,\n    advanced_disable_feature_flags_on_first_load: false,\n    advanced_disable_toolbar_metrics: false,\n    feature_flag_request_timeout_ms: 3000,\n    surveys_request_timeout_ms: SURVEYS_REQUEST_TIMEOUT_MS,\n    on_request_error: (res) => {\n        const error = 'Bad HTTP status: ' + res.statusCode + ' ' + res.text\n        logger.error(error)\n    },\n    get_device_id: (uuid) => uuid,\n    capture_performance: undefined,\n    name: 'posthog',\n    bootstrap: {},\n    disable_compression: false,\n    session_idle_timeout_seconds: 30 * 60, // 30 minutes\n    person_profiles: 'identified_only',\n    before_send: undefined,\n    request_queue_config: { flush_interval_ms: DEFAULT_FLUSH_INTERVAL_MS },\n\n    // Used for internal testing\n    _onCapture: __NOOP,\n})\n\nexport const configRenames = (origConfig: Partial<PostHogConfig>): Partial<PostHogConfig> => {\n    const renames: Partial<PostHogConfig> = {}\n    if (!isUndefined(origConfig.process_person)) {\n        renames.person_profiles = origConfig.process_person\n    }\n    if (!isUndefined(origConfig.xhr_headers)) {\n        renames.request_headers = origConfig.xhr_headers\n    }\n    if (!isUndefined(origConfig.cookie_name)) {\n        renames.persistence_name = origConfig.cookie_name\n    }\n    if (!isUndefined(origConfig.disable_cookie)) {\n        renames.disable_persistence = origConfig.disable_cookie\n    }\n    if (!isUndefined(origConfig.store_google)) {\n        renames.save_campaign_params = origConfig.store_google\n    }\n    if (!isUndefined(origConfig.verbose)) {\n        renames.debug = origConfig.verbose\n    }\n    // on_xhr_error is not present, as the type is different to on_request_error\n\n    // the original config takes priority over the renames\n    const newConfig = extend({}, renames, origConfig)\n\n    // merge property_blacklist into property_denylist\n    if (isArray(origConfig.property_blacklist)) {\n        if (isUndefined(origConfig.property_denylist)) {\n            newConfig.property_denylist = origConfig.property_blacklist\n        } else if (isArray(origConfig.property_denylist)) {\n            newConfig.property_denylist = [...origConfig.property_blacklist, ...origConfig.property_denylist]\n        } else {\n            logger.error('Invalid value for property_denylist config: ' + origConfig.property_denylist)\n        }\n    }\n\n    return newConfig\n}\n\nclass DeprecatedWebPerformanceObserver {\n    get _forceAllowLocalhost(): boolean {\n        return this.__forceAllowLocalhost\n    }\n\n    set _forceAllowLocalhost(value: boolean) {\n        logger.error(\n            'WebPerformanceObserver is deprecated and has no impact on network capture. Use `_forceAllowLocalhostNetworkCapture` on `posthog.sessionRecording`'\n        )\n        this.__forceAllowLocalhost = value\n    }\n\n    private __forceAllowLocalhost: boolean = false\n}\n\n/**\n * PostHog Library Object\n * @constructor\n */\nexport class PostHog {\n    __loaded: boolean\n    config: PostHogConfig\n\n    rateLimiter: RateLimiter\n    scrollManager: ScrollManager\n    pageViewManager: PageViewManager\n    featureFlags: PostHogFeatureFlags\n    surveys: PostHogSurveys\n    experiments: WebExperiments\n    toolbar: Toolbar\n    exceptions: PostHogExceptions\n    consent: ConsentManager\n\n    // These are instance-specific state created after initialisation\n    persistence?: PostHogPersistence\n    sessionPersistence?: PostHogPersistence\n    sessionManager?: SessionIdManager\n    sessionPropsManager?: SessionPropsManager\n    requestRouter: RequestRouter\n    siteApps?: SiteApps\n    autocapture?: Autocapture\n    heatmaps?: Heatmaps\n    webVitalsAutocapture?: WebVitalsAutocapture\n    exceptionObserver?: ExceptionObserver\n    deadClicksAutocapture?: DeadClicksAutocapture\n\n    _requestQueue?: RequestQueue\n    _retryQueue?: RetryQueue\n    sessionRecording?: SessionRecording\n    webPerformance = new DeprecatedWebPerformanceObserver()\n\n    _initialPageviewCaptured: boolean\n    _personProcessingSetOncePropertiesSent: boolean = false\n    _triggered_notifs: any\n    compression?: Compression\n    __request_queue: QueuedRequestWithOptions[]\n    analyticsDefaultEndpoint: string\n    version = Config.LIB_VERSION\n    _initialPersonProfilesConfig: 'always' | 'never' | 'identified_only' | null\n    _cachedIdentify: string | null\n\n    SentryIntegration: typeof SentryIntegration\n    sentryIntegration: (options?: SentryIntegrationOptions) => ReturnType<typeof sentryIntegration>\n\n    private _internalEventEmitter = new SimpleEventEmitter()\n\n    // Legacy property to support existing usage - this isn't technically correct but it's what it has always been - a proxy for flags being loaded\n    public get decideEndpointWasHit(): boolean {\n        return this.featureFlags?.hasLoadedFlags ?? false\n    }\n\n    /** DEPRECATED: We keep this to support existing usage but now one should just call .setPersonProperties */\n    people: {\n        set: (prop: string | Properties, to?: string, callback?: RequestCallback) => void\n        set_once: (prop: string | Properties, to?: string, callback?: RequestCallback) => void\n    }\n\n    constructor() {\n        this.config = defaultConfig()\n\n        this.SentryIntegration = SentryIntegration\n        this.sentryIntegration = (options?: SentryIntegrationOptions) => sentryIntegration(this, options)\n        this.__request_queue = []\n        this.__loaded = false\n        this.analyticsDefaultEndpoint = '/e/'\n        this._initialPageviewCaptured = false\n        this._initialPersonProfilesConfig = null\n        this._cachedIdentify = null\n        this.featureFlags = new PostHogFeatureFlags(this)\n        this.toolbar = new Toolbar(this)\n        this.scrollManager = new ScrollManager(this)\n        this.pageViewManager = new PageViewManager(this)\n        this.surveys = new PostHogSurveys(this)\n        this.experiments = new WebExperiments(this)\n        this.exceptions = new PostHogExceptions(this)\n        this.rateLimiter = new RateLimiter(this)\n        this.requestRouter = new RequestRouter(this)\n        this.consent = new ConsentManager(this)\n\n        // NOTE: See the property definition for deprecation notice\n        this.people = {\n            set: (prop: string | Properties, to?: string, callback?: RequestCallback) => {\n                const setProps = isString(prop) ? { [prop]: to } : prop\n                this.setPersonProperties(setProps)\n                callback?.({} as any)\n            },\n            set_once: (prop: string | Properties, to?: string, callback?: RequestCallback) => {\n                const setProps = isString(prop) ? { [prop]: to } : prop\n                this.setPersonProperties(undefined, setProps)\n                callback?.({} as any)\n            },\n        }\n\n        this.on('eventCaptured', (data) => logger.info(`send \"${data?.event}\"`, data))\n    }\n\n    // Initialization methods\n\n    /**\n     * This function initializes a new instance of the PostHog capturing object.\n     * All new instances are added to the main posthog object as sub properties (such as\n     * posthog.library_name) and also returned by this function. To define a\n     * second instance on the page, you would call:\n     *\n     *     posthog.init('new token', { your: 'config' }, 'library_name');\n     *\n     * and use it like so:\n     *\n     *     posthog.library_name.capture(...);\n     *\n     * @param {String} token   Your PostHog API token\n     * @param {Object} [config]  A dictionary of config options to override. <a href=\"https://github.com/posthog/posthog-js/blob/6e0e873/src/posthog-core.js#L57-L91\">See a list of default config options</a>.\n     * @param {String} [name]    The name for the new posthog instance that you want created\n     */\n    init(\n        token: string,\n        config?: OnlyValidKeys<Partial<PostHogConfig>, Partial<PostHogConfig>>,\n        name?: string\n    ): PostHog {\n        if (!name || name === PRIMARY_INSTANCE_NAME) {\n            // This means we are initializing the primary instance (i.e. this)\n            return this._init(token, config, name)\n        } else {\n            const namedPosthog = instances[name] ?? new PostHog()\n            namedPosthog._init(token, config, name)\n            instances[name] = namedPosthog\n\n            // Add as a property to the primary instance (this isn't type-safe but its how it was always done)\n            ;(instances[PRIMARY_INSTANCE_NAME] as any)[name] = namedPosthog\n\n            return namedPosthog\n        }\n    }\n\n    // posthog._init(token:string, config:object, name:string)\n    //\n    // This function sets up the current instance of the posthog\n    // library.  The difference between this method and the init(...)\n    // method is this one initializes the actual instance, whereas the\n    // init(...) method sets up a new library and calls _init on it.\n    //\n    // Note that there are operations that can be asynchronous, so we\n    // accept a callback that is called when all the asynchronous work\n    // is done. Note that we do not use promises because we want to be\n    // IE11 compatible. We could use polyfills, which would make the\n    // code a bit cleaner, but will add some overhead.\n    //\n    _init(token: string, config: Partial<PostHogConfig> = {}, name?: string): PostHog {\n        if (isUndefined(token) || isEmptyString(token)) {\n            logger.critical(\n                'PostHog was initialized without a token. This likely indicates a misconfiguration. Please check the first argument passed to posthog.init()'\n            )\n            return this\n        }\n\n        if (this.__loaded) {\n            logger.warn('You have already initialized PostHog! Re-initializing is a no-op')\n            return this\n        }\n\n        this.__loaded = true\n        this.config = {} as PostHogConfig // will be set right below\n        this._triggered_notifs = []\n\n        if (config.person_profiles) {\n            this._initialPersonProfilesConfig = config.person_profiles\n        }\n\n        this.set_config(\n            extend({}, defaultConfig(), configRenames(config), {\n                name: name,\n                token: token,\n            })\n        )\n\n        if (this.config.on_xhr_error) {\n            logger.error('on_xhr_error is deprecated. Use on_request_error instead')\n        }\n\n        this.compression = config.disable_compression ? undefined : Compression.GZipJS\n\n        this.persistence = new PostHogPersistence(this.config)\n        this.sessionPersistence =\n            this.config.persistence === 'sessionStorage' || this.config.persistence === 'memory'\n                ? this.persistence\n                : new PostHogPersistence({ ...this.config, persistence: 'sessionStorage' })\n\n        // should I store the initial person profiles config in persistence?\n        const initialPersistenceProps = { ...this.persistence.props }\n        const initialSessionProps = { ...this.sessionPersistence.props }\n\n        this._requestQueue = new RequestQueue(\n            (req) => this._send_retriable_request(req),\n            this.config.request_queue_config\n        )\n        this._retryQueue = new RetryQueue(this)\n        this.__request_queue = []\n\n        if (!this.config.__preview_experimental_cookieless_mode) {\n            this.sessionManager = new SessionIdManager(this)\n            this.sessionPropsManager = new SessionPropsManager(this, this.sessionManager, this.persistence)\n        }\n\n        new TracingHeaders(this).startIfEnabledOrStop()\n\n        this.siteApps = new SiteApps(this)\n        this.siteApps?.init()\n\n        if (!this.config.__preview_experimental_cookieless_mode) {\n            this.sessionRecording = new SessionRecording(this)\n            this.sessionRecording.startIfEnabledOrStop()\n        }\n\n        if (!this.config.disable_scroll_properties) {\n            this.scrollManager.startMeasuringScrollPosition()\n        }\n\n        this.autocapture = new Autocapture(this)\n        this.autocapture.startIfEnabled()\n        this.surveys.loadIfEnabled()\n\n        this.heatmaps = new Heatmaps(this)\n        this.heatmaps.startIfEnabled()\n\n        this.webVitalsAutocapture = new WebVitalsAutocapture(this)\n\n        this.exceptionObserver = new ExceptionObserver(this)\n        this.exceptionObserver.startIfEnabled()\n\n        this.deadClicksAutocapture = new DeadClicksAutocapture(this, isDeadClicksEnabledForAutocapture)\n        this.deadClicksAutocapture.startIfEnabled()\n\n        // if any instance on the page has debug = true, we set the\n        // global debug to be true\n        Config.DEBUG = Config.DEBUG || this.config.debug\n        if (Config.DEBUG) {\n            logger.info('Starting in debug mode', {\n                this: this,\n                config,\n                thisC: { ...this.config },\n                p: initialPersistenceProps,\n                s: initialSessionProps,\n            })\n        }\n\n        this._sync_opt_out_with_persistence()\n\n        // isUndefined doesn't provide typehint here so wouldn't reduce bundle as we'd need to assign\n        // eslint-disable-next-line posthog-js/no-direct-undefined-check\n        if (config.bootstrap?.distinctID !== undefined) {\n            const uuid = this.config.get_device_id(uuidv7())\n            const deviceID = config.bootstrap?.isIdentifiedID ? uuid : config.bootstrap.distinctID\n            this.persistence.set_property(USER_STATE, config.bootstrap?.isIdentifiedID ? 'identified' : 'anonymous')\n            this.register({\n                distinct_id: config.bootstrap.distinctID,\n                $device_id: deviceID,\n            })\n        }\n\n        if (this._hasBootstrappedFeatureFlags()) {\n            const activeFlags = Object.keys(config.bootstrap?.featureFlags || {})\n                .filter((flag) => !!config.bootstrap?.featureFlags?.[flag])\n                .reduce(\n                    (res: Record<string, string | boolean>, key) => (\n                        (res[key] = config.bootstrap?.featureFlags?.[key] || false), res\n                    ),\n                    {}\n                )\n            const featureFlagPayloads = Object.keys(config.bootstrap?.featureFlagPayloads || {})\n                .filter((key) => activeFlags[key])\n                .reduce((res: Record<string, JsonType>, key) => {\n                    if (config.bootstrap?.featureFlagPayloads?.[key]) {\n                        res[key] = config.bootstrap?.featureFlagPayloads?.[key]\n                    }\n                    return res\n                }, {})\n\n            this.featureFlags.receivedFeatureFlags({ featureFlags: activeFlags, featureFlagPayloads })\n        }\n\n        if (this.config.__preview_experimental_cookieless_mode) {\n            this.register_once(\n                {\n                    distinct_id: COOKIELESS_SENTINEL_VALUE,\n                    $device_id: null,\n                },\n                ''\n            )\n        } else if (!this.get_distinct_id()) {\n            // There is no need to set the distinct id\n            // or the device id if something was already stored\n            // in the persistence\n            const uuid = this.config.get_device_id(uuidv7())\n\n            this.register_once(\n                {\n                    distinct_id: uuid,\n                    $device_id: uuid,\n                },\n                ''\n            )\n            // distinct id == $device_id is a proxy for anonymous user\n            this.persistence.set_property(USER_STATE, 'anonymous')\n        }\n        // Set up event handler for pageleave\n        // Use `onpagehide` if available, see https://calendar.perfplanet.com/2020/beaconing-in-practice/#beaconing-reliability-avoiding-abandons\n        //\n        // Not making it passive to try and force the browser to handle this before the page is unloaded\n        addEventListener(window, 'onpagehide' in self ? 'pagehide' : 'unload', this._handle_unload.bind(this), {\n            passive: false,\n        })\n\n        this.toolbar.maybeLoadToolbar()\n\n        // We want to avoid promises for IE11 compatibility, so we use callbacks here\n        if (config.segment) {\n            setupSegmentIntegration(this, () => this._loaded())\n        } else {\n            this._loaded()\n        }\n\n        if (isFunction(this.config._onCapture) && this.config._onCapture !== __NOOP) {\n            logger.warn('onCapture is deprecated. Please use `before_send` instead')\n            this.on('eventCaptured', (data) => this.config._onCapture(data.event, data))\n        }\n\n        return this\n    }\n\n    _onRemoteConfig(config: RemoteConfig) {\n        if (!(document && document.body)) {\n            logger.info('document not ready yet, trying again in 500 milliseconds...')\n            setTimeout(() => {\n                this._onRemoteConfig(config)\n            }, 500)\n            return\n        }\n\n        this.compression = undefined\n        if (config.supportedCompression && !this.config.disable_compression) {\n            this.compression = includes(config['supportedCompression'], Compression.GZipJS)\n                ? Compression.GZipJS\n                : includes(config['supportedCompression'], Compression.Base64)\n                  ? Compression.Base64\n                  : undefined\n        }\n\n        if (config.analytics?.endpoint) {\n            this.analyticsDefaultEndpoint = config.analytics.endpoint\n        }\n\n        this.set_config({\n            person_profiles: this._initialPersonProfilesConfig ? this._initialPersonProfilesConfig : 'identified_only',\n        })\n\n        this.siteApps?.onRemoteConfig(config)\n        this.sessionRecording?.onRemoteConfig(config)\n        this.autocapture?.onRemoteConfig(config)\n        this.heatmaps?.onRemoteConfig(config)\n        this.surveys.onRemoteConfig(config)\n        this.webVitalsAutocapture?.onRemoteConfig(config)\n        this.exceptionObserver?.onRemoteConfig(config)\n        this.deadClicksAutocapture?.onRemoteConfig(config)\n    }\n\n    _loaded(): void {\n        try {\n            this.config.loaded(this)\n        } catch (err) {\n            logger.critical('`loaded` function failed', err)\n        }\n\n        this._start_queue_if_opted_in()\n\n        // this happens after \"loaded\" so a user can call identify or any other things before the pageview fires\n        if (this.config.capture_pageview) {\n            // NOTE: We want to fire this on the next tick as the previous implementation had this side effect\n            // and some clients may rely on it\n            setTimeout(() => {\n                if (this.consent.isOptedIn()) {\n                    this._captureInitialPageview()\n                }\n            }, 1)\n        }\n\n        new RemoteConfigLoader(this).load()\n        this.featureFlags.decide()\n    }\n\n    _start_queue_if_opted_in(): void {\n        if (!this.has_opted_out_capturing()) {\n            if (this.config.request_batching) {\n                this._requestQueue?.enable()\n            }\n        }\n    }\n\n    _dom_loaded(): void {\n        if (!this.has_opted_out_capturing()) {\n            eachArray(this.__request_queue, (item) => this._send_retriable_request(item))\n        }\n\n        this.__request_queue = []\n        this._start_queue_if_opted_in()\n    }\n\n    _handle_unload(): void {\n        if (!this.config.request_batching) {\n            if (this._shouldCapturePageleave()) {\n                this.capture('$pageleave', null, { transport: 'sendBeacon' })\n            }\n            return\n        }\n\n        if (this._shouldCapturePageleave()) {\n            this.capture('$pageleave')\n        }\n\n        this._requestQueue?.unload()\n        this._retryQueue?.unload()\n    }\n\n    _send_request(options: QueuedRequestWithOptions): void {\n        if (!this.__loaded) {\n            return\n        }\n\n        if (ENQUEUE_REQUESTS) {\n            this.__request_queue.push(options)\n            return\n        }\n\n        if (this.rateLimiter.isServerRateLimited(options.batchKey)) {\n            return\n        }\n\n        options.transport = options.transport || this.config.api_transport\n        options.url = extendURLParams(options.url, {\n            // Whether to detect ip info or not\n            ip: this.config.ip ? 1 : 0,\n        })\n        options.headers = {\n            ...this.config.request_headers,\n        }\n        options.compression = options.compression === 'best-available' ? this.compression : options.compression\n\n        // Specially useful if you're doing SSR with NextJS\n        // Users must be careful when tweaking `cache` because they might get out-of-date feature flags\n        options.fetchOptions = options.fetchOptions || this.config.fetch_options\n\n        request({\n            ...options,\n            callback: (response) => {\n                this.rateLimiter.checkForLimiting(response)\n\n                if (response.statusCode >= 400) {\n                    this.config.on_request_error?.(response)\n                }\n\n                options.callback?.(response)\n            },\n        })\n    }\n\n    _send_retriable_request(options: QueuedRequestWithOptions): void {\n        if (this._retryQueue) {\n            this._retryQueue.retriableRequest(options)\n        } else {\n            this._send_request(options)\n        }\n    }\n\n    /**\n     * _execute_array() deals with processing any posthog function\n     * calls that were called before the PostHog library were loaded\n     * (and are thus stored in an array so they can be called later)\n     *\n     * Note: we fire off all the posthog function calls && user defined\n     * functions BEFORE we fire off posthog capturing calls. This is so\n     * identify/register/set_config calls can properly modify early\n     * capturing calls.\n     *\n     * @param {Array} array\n     */\n    _execute_array(array: SnippetArrayItem[]): void {\n        let fn_name\n        const alias_calls: SnippetArrayItem[] = []\n        const other_calls: SnippetArrayItem[] = []\n        const capturing_calls: SnippetArrayItem[] = []\n        eachArray(array, (item) => {\n            if (item) {\n                fn_name = item[0]\n                if (isArray(fn_name)) {\n                    capturing_calls.push(item) // chained call e.g. posthog.get_group().set()\n                } else if (isFunction(item)) {\n                    ;(item as any).call(this)\n                } else if (isArray(item) && fn_name === 'alias') {\n                    alias_calls.push(item)\n                } else if (isArray(item) && fn_name.indexOf('capture') !== -1 && isFunction((this as any)[fn_name])) {\n                    capturing_calls.push(item)\n                } else {\n                    other_calls.push(item)\n                }\n            }\n        })\n\n        const execute = function (calls: SnippetArrayItem[], thisArg: any) {\n            eachArray(\n                calls,\n                function (item) {\n                    if (isArray(item[0])) {\n                        // chained call\n                        let caller = thisArg\n                        each(item, function (call) {\n                            caller = caller[call[0]].apply(caller, call.slice(1))\n                        })\n                    } else {\n                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                        // @ts-ignore\n                        this[item[0]].apply(this, item.slice(1))\n                    }\n                },\n                thisArg\n            )\n        }\n\n        execute(alias_calls, this)\n        execute(other_calls, this)\n        execute(capturing_calls, this)\n    }\n\n    _hasBootstrappedFeatureFlags(): boolean {\n        return (\n            (this.config.bootstrap?.featureFlags && Object.keys(this.config.bootstrap?.featureFlags).length > 0) ||\n            false\n        )\n    }\n\n    /**\n     * push() keeps the standard async-array-push\n     * behavior around after the lib is loaded.\n     * This is only useful for external integrations that\n     * do not wish to rely on our convenience methods\n     * (created in the snippet).\n     *\n     * ### Usage:\n     *     posthog.push(['register', { a: 'b' }]);\n     *\n     * @param {Array} item A [function_name, args...] array to be executed\n     */\n    push(item: SnippetArrayItem): void {\n        this._execute_array([item])\n    }\n\n    /**\n     * Capture an event. This is the most important and\n     * frequently used PostHog function.\n     *\n     * ### Usage:\n     *\n     *     // capture an event named 'Registered'\n     *     posthog.capture('Registered', {'Gender': 'Male', 'Age': 21});\n     *\n     *     // capture an event using navigator.sendBeacon\n     *     posthog.capture('Left page', {'duration_seconds': 35}, {transport: 'sendBeacon'});\n     *\n     * @param {String} event_name The name of the event. This can be anything the user does - 'Button Click', 'Sign Up', 'Item Purchased', etc.\n     * @param {Object} [properties] A set of properties to include with the event you're sending. These describe the user who did the event or details about the event itself.\n     * @param {Object} [config] Optional configuration for this capture request.\n     * @param {String} [config.transport] Transport method for network request ('XHR' or 'sendBeacon').\n     * @param {Date} [config.timestamp] Timestamp is a Date object. If not set, it'll automatically be set to the current time.\n     */\n    capture(\n        event_name: EventName,\n        properties?: Properties | null,\n        options?: CaptureOptions\n    ): CaptureResult | undefined {\n        // While developing, a developer might purposefully _not_ call init(),\n        // in this case, we would like capture to be a noop.\n        if (!this.__loaded || !this.persistence || !this.sessionPersistence || !this._requestQueue) {\n            logger.uninitializedWarning('posthog.capture')\n            return\n        }\n\n        if (this.consent.isOptedOut()) {\n            return\n        }\n\n        // typing doesn't prevent interesting data\n        if (isUndefined(event_name) || !isString(event_name)) {\n            logger.error('No event name provided to posthog.capture')\n            return\n        }\n\n        if (!this.config.opt_out_useragent_filter && this._is_bot()) {\n            return\n        }\n\n        const clientRateLimitContext = !options?.skip_client_rate_limiting\n            ? this.rateLimiter.clientRateLimitContext()\n            : undefined\n\n        if (clientRateLimitContext?.isRateLimited) {\n            logger.critical('This capture call is ignored due to client rate limiting.')\n            return\n        }\n\n        // update persistence\n        this.sessionPersistence.update_search_keyword()\n\n        // The initial campaign/referrer props need to be stored in the regular persistence, as they are there to mimic\n        // the person-initial props. The non-initial versions are stored in the sessionPersistence, as they are sent\n        // with every event and used by the session table to create session-initial props.\n        if (this.config.save_campaign_params) {\n            this.sessionPersistence.update_campaign_params()\n        }\n        if (this.config.save_referrer) {\n            this.sessionPersistence.update_referrer_info()\n        }\n\n        if (this.config.save_campaign_params || this.config.save_referrer) {\n            this.persistence.set_initial_person_info()\n        }\n\n        const systemTime = new Date()\n        const timestamp = options?.timestamp || systemTime\n\n        const uuid = uuidv7()\n        let data: CaptureResult = {\n            uuid,\n            event: event_name,\n            properties: this._calculate_event_properties(event_name, properties || {}, timestamp, uuid),\n        }\n\n        if (clientRateLimitContext) {\n            data.properties['$lib_rate_limit_remaining_tokens'] = clientRateLimitContext.remainingTokens\n        }\n\n        const setProperties = options?.$set\n        if (setProperties) {\n            data.$set = options?.$set\n        }\n        const setOnceProperties = this._calculate_set_once_properties(options?.$set_once)\n        if (setOnceProperties) {\n            data.$set_once = setOnceProperties\n        }\n\n        data = _copyAndTruncateStrings(data, options?._noTruncate ? null : this.config.properties_string_max_length)\n        data.timestamp = timestamp\n        if (!isUndefined(options?.timestamp)) {\n            data.properties['$event_time_override_provided'] = true\n            data.properties['$event_time_override_system_time'] = systemTime\n        }\n\n        // Top-level $set overriding values from the one from properties is taken from the plugin-server normalizeEvent\n        // This doesn't handle $set_once, because posthog-people doesn't either\n        const finalSet = { ...data.properties['$set'], ...data['$set'] }\n        if (!isEmptyObject(finalSet)) {\n            this.setPersonPropertiesForFlags(finalSet)\n        }\n\n        if (!isNullish(this.config.before_send)) {\n            const beforeSendResult = this._runBeforeSend(data)\n            if (!beforeSendResult) {\n                return\n            } else {\n                data = beforeSendResult\n            }\n        }\n\n        this._internalEventEmitter.emit('eventCaptured', data)\n\n        const requestOptions: QueuedRequestWithOptions = {\n            method: 'POST',\n            url: options?._url ?? this.requestRouter.endpointFor('api', this.analyticsDefaultEndpoint),\n            data,\n            compression: 'best-available',\n            batchKey: options?._batchKey,\n        }\n\n        if (this.config.request_batching && (!options || options?._batchKey) && !options?.send_instantly) {\n            this._requestQueue.enqueue(requestOptions)\n        } else {\n            this._send_retriable_request(requestOptions)\n        }\n\n        return data\n    }\n\n    _addCaptureHook(callback: (eventName: string, eventPayload?: CaptureResult) => void): () => void {\n        return this.on('eventCaptured', (data) => callback(data.event, data))\n    }\n\n    _calculate_event_properties(\n        event_name: string,\n        event_properties: Properties,\n        timestamp?: Date,\n        uuid?: string\n    ): Properties {\n        timestamp = timestamp || new Date()\n        if (!this.persistence || !this.sessionPersistence) {\n            return event_properties\n        }\n\n        // set defaults\n        const startTimestamp = this.persistence.remove_event_timer(event_name)\n        let properties = { ...event_properties }\n        properties['token'] = this.config.token\n\n        if (this.config.__preview_experimental_cookieless_mode) {\n            // Set a flag to tell the plugin server to use cookieless server hash mode\n            properties[COOKIELESS_MODE_FLAG_PROPERTY] = true\n        }\n\n        if (event_name === '$snapshot') {\n            const persistenceProps = { ...this.persistence.properties(), ...this.sessionPersistence.properties() }\n            properties['distinct_id'] = persistenceProps.distinct_id\n            if (\n                // we spotted one customer that was managing to send `false` for ~9k events a day\n                !(isString(properties['distinct_id']) || isNumber(properties['distinct_id'])) ||\n                isEmptyString(properties['distinct_id'])\n            ) {\n                logger.error('Invalid distinct_id for replay event. This indicates a bug in your implementation')\n            }\n            return properties\n        }\n\n        const infoProperties = Info.properties({\n            maskPersonalDataProperties: this.config.mask_personal_data_properties,\n            customPersonalDataProperties: this.config.custom_personal_data_properties,\n        })\n\n        if (this.sessionManager) {\n            const { sessionId, windowId } = this.sessionManager.checkAndGetSessionAndWindowId()\n            properties['$session_id'] = sessionId\n            properties['$window_id'] = windowId\n        }\n        if (this.sessionPropsManager) {\n            extend(properties, this.sessionPropsManager.getSessionProps())\n        }\n\n        try {\n            if (this.sessionRecording) {\n                properties['$recording_status'] = this.sessionRecording.status\n                properties['$sdk_debug_replay_internal_buffer_length'] = this.sessionRecording['buffer'].data.length\n                properties['$sdk_debug_replay_internal_buffer_size'] = this.sessionRecording['buffer'].size\n            }\n            properties['$sdk_debug_retry_queue_size'] = this._retryQueue?.['queue']?.length\n        } catch (e: any) {\n            properties['$sdk_debug_error_capturing_properties'] = String(e)\n        }\n\n        if (this.requestRouter.region === RequestRouterRegion.CUSTOM) {\n            properties['$lib_custom_api_host'] = this.config.api_host\n        }\n\n        let pageviewProperties: Record<string, any>\n        if (event_name === '$pageview') {\n            pageviewProperties = this.pageViewManager.doPageView(timestamp, uuid)\n        } else if (event_name === '$pageleave') {\n            pageviewProperties = this.pageViewManager.doPageLeave(timestamp)\n        } else {\n            pageviewProperties = this.pageViewManager.doEvent()\n        }\n        properties = extend(properties, pageviewProperties)\n\n        if (event_name === '$pageview' && document) {\n            properties['title'] = document.title\n        }\n\n        // set $duration if time_event was previously called for this event\n        if (!isUndefined(startTimestamp)) {\n            const duration_in_ms = timestamp.getTime() - startTimestamp\n            properties['$duration'] = parseFloat((duration_in_ms / 1000).toFixed(3))\n        }\n\n        // this is only added when this.config.opt_out_useragent_filter is true,\n        // or it would always add \"browser\"\n        if (userAgent && this.config.opt_out_useragent_filter) {\n            properties['$browser_type'] = this._is_bot() ? 'bot' : 'browser'\n        }\n\n        // note: extend writes to the first object, so lets make sure we\n        // don't write to the persistence properties object and info\n        // properties object by passing in a new object\n\n        // update properties with pageview info and super-properties\n        properties = extend(\n            {},\n            infoProperties,\n            this.persistence.properties(),\n            this.sessionPersistence.properties(),\n            properties\n        )\n\n        properties['$is_identified'] = this._isIdentified()\n\n        if (isArray(this.config.property_denylist)) {\n            each(this.config.property_denylist, function (denylisted_prop) {\n                delete properties[denylisted_prop]\n            })\n        } else {\n            logger.error(\n                'Invalid value for property_denylist config: ' +\n                    this.config.property_denylist +\n                    ' or property_blacklist config: ' +\n                    this.config.property_blacklist\n            )\n        }\n\n        const sanitize_properties = this.config.sanitize_properties\n        if (sanitize_properties) {\n            logger.error('sanitize_properties is deprecated. Use before_send instead')\n            properties = sanitize_properties(properties, event_name)\n        }\n\n        // add person processing flag as very last step, so it cannot be overridden\n        const hasPersonProcessing = this._hasPersonProcessing()\n        properties['$process_person_profile'] = hasPersonProcessing\n        // if the event has person processing, ensure that all future events will too, even if the setting changes\n        if (hasPersonProcessing) {\n            this._requirePersonProcessing('_calculate_event_properties')\n        }\n\n        return properties\n    }\n\n    /**\n     * Add additional set_once properties to the event when creating a person profile. This allows us to create the\n     * profile with mostly-accurate properties, despite earlier events not setting them. We do this by storing them in\n     * persistence.\n     * @param dataSetOnce\n     */\n    _calculate_set_once_properties(dataSetOnce?: Properties): Properties | undefined {\n        if (!this.persistence || !this._hasPersonProcessing()) {\n            return dataSetOnce\n        }\n\n        if (this._personProcessingSetOncePropertiesSent) {\n            // We only need to send these properties once. Sending them with later events would be redundant and would\n            // just require extra work on the server to process them.\n            return dataSetOnce\n        }\n        // if we're an identified person, send initial params with every event\n        const initialProps = this.persistence.get_initial_props()\n        const sessionProps = this.sessionPropsManager?.getSetOnceProps()\n        let setOnceProperties = extend({}, initialProps, sessionProps || {}, dataSetOnce || {})\n        const sanitize_properties = this.config.sanitize_properties\n        if (sanitize_properties) {\n            logger.error('sanitize_properties is deprecated. Use before_send instead')\n            setOnceProperties = sanitize_properties(setOnceProperties, '$set_once')\n        }\n        this._personProcessingSetOncePropertiesSent = true\n        if (isEmptyObject(setOnceProperties)) {\n            return undefined\n        }\n        return setOnceProperties\n    }\n\n    /**\n     * Register a set of super properties, which are included with all\n     * events. This will overwrite previous super property values, except\n     * for session properties (see `register_for_session(properties)`).\n     *\n     * ### Usage:\n     *\n     *     // register 'Gender' as a super property\n     *     posthog.register({'Gender': 'Female'});\n     *\n     *     // register several super properties when a user signs up\n     *     posthog.register({\n     *         'Email': 'jdoe@example.com',\n     *         'Account Type': 'Free'\n     *     });\n     *\n     *     // Display the properties\n     *     console.log(posthog.persistence.properties())\n     *\n     * @param {Object} properties properties to store about the user\n     * @param {Number} [days] How many days since the user's last visit to store the super properties\n     */\n    register(properties: Properties, days?: number): void {\n        this.persistence?.register(properties, days)\n    }\n\n    /**\n     * Register a set of super properties only once. These will not\n     * overwrite previous super property values, unlike register().\n     *\n     * ### Usage:\n     *\n     *     // register a super property for the first time only\n     *     posthog.register_once({\n     *         'First Login Date': new Date().toISOString()\n     *     });\n     *\n     *     // Display the properties\n     *     console.log(posthog.persistence.properties())\n     *\n     * ### Notes:\n     *\n     * If default_value is specified, current super properties\n     * with that value will be overwritten.\n     *\n     * @param {Object} properties An associative array of properties to store about the user\n     * @param {*} [default_value] Value to override if already set in super properties (ex: 'False') Default: 'None'\n     * @param {Number} [days] How many days since the users last visit to store the super properties\n     */\n    register_once(properties: Properties, default_value?: Property, days?: number): void {\n        this.persistence?.register_once(properties, default_value, days)\n    }\n\n    /**\n     * Register a set of super properties, which are included with all events, but only\n     * for THIS SESSION. These will overwrite all other super property values.\n     *\n     * Unlike regular super properties, which last in LocalStorage for a long time,\n     * session super properties get cleared after a session ends.\n     *\n     * ### Usage:\n     *\n     *     // register on all events this session\n     *     posthog.register_for_session({'referer': customGetReferer()});\n     *\n     *     // register several session super properties when a user signs up\n     *     posthog.register_for_session({\n     *         'selectedPlan': 'pro',\n     *         'completedSteps': 4,\n     *     });\n     *\n     *     // Display the properties\n     *     console.log(posthog.sessionPersistence.properties())\n     *\n     * @param {Object} properties An associative array of properties to store about the user\n     */\n    register_for_session(properties: Properties): void {\n        this.sessionPersistence?.register(properties)\n    }\n\n    /**\n     * Delete a super property stored with the current user.\n     *\n     * @param {String} property The name of the super property to remove\n     */\n    unregister(property: string): void {\n        this.persistence?.unregister(property)\n    }\n\n    /**\n     * Delete a session super property stored with the current user.\n     *\n     * @param {String} property The name of the session super property to remove\n     */\n    unregister_for_session(property: string): void {\n        this.sessionPersistence?.unregister(property)\n    }\n\n    _register_single(prop: string, value: Property) {\n        this.register({ [prop]: value })\n    }\n\n    /*\n     * Get feature flag value for user (supports multivariate flags).\n     *\n     * ### Usage:\n     *\n     *     if(posthog.getFeatureFlag('beta-feature') === 'some-value') { // do something }\n     *\n     * @param {Object|String} prop Key of the feature flag.\n     * @param {Object|String} options (optional) If {send_event: false}, we won't send an $feature_flag_call event to PostHog.\n     */\n    getFeatureFlag(key: string, options?: { send_event?: boolean }): boolean | string | undefined {\n        return this.featureFlags.getFeatureFlag(key, options)\n    }\n\n    /*\n     * Get feature flag payload value matching key for user (supports multivariate flags).\n     *\n     * ### Usage:\n     *\n     *     if(posthog.getFeatureFlag('beta-feature') === 'some-value') {\n     *          const someValue = posthog.getFeatureFlagPayload('beta-feature')\n     *          // do something\n     *     }\n     *\n     * @param {Object|String} prop Key of the feature flag.\n     */\n    getFeatureFlagPayload(key: string): JsonType {\n        const payload = this.featureFlags.getFeatureFlagPayload(key)\n        try {\n            return JSON.parse(payload as any)\n        } catch {\n            return payload\n        }\n    }\n\n    /*\n     * See if feature flag is enabled for user.\n     *\n     * ### Usage:\n     *\n     *     if(posthog.isFeatureEnabled('beta-feature')) { // do something }\n     *\n     * @param {Object|String} prop Key of the feature flag.\n     * @param {Object|String} options (optional) If {send_event: false}, we won't send an $feature_flag_call event to PostHog.\n     */\n    isFeatureEnabled(key: string, options?: { send_event: boolean }): boolean | undefined {\n        return this.featureFlags.isFeatureEnabled(key, options)\n    }\n\n    reloadFeatureFlags(): void {\n        this.featureFlags.reloadFeatureFlags()\n    }\n\n    /** Opt the user in or out of an early access feature. */\n    updateEarlyAccessFeatureEnrollment(key: string, isEnrolled: boolean): void {\n        this.featureFlags.updateEarlyAccessFeatureEnrollment(key, isEnrolled)\n    }\n\n    /** Get the list of early access features. To check enrollment status, use `isFeatureEnabled`. */\n    getEarlyAccessFeatures(\n        callback: EarlyAccessFeatureCallback,\n        force_reload = false,\n        stages?: EarlyAccessFeatureStage[]\n    ): void {\n        return this.featureFlags.getEarlyAccessFeatures(callback, force_reload, stages)\n    }\n\n    /**\n     * Exposes a set of events that PostHog will emit.\n     * e.g. `eventCaptured` is emitted immediately before trying to send an event\n     *\n     * Unlike  `onFeatureFlags` and `onSessionId` these are not called when the\n     * listener is registered, the first callback will be the next event\n     * _after_ registering a listener\n     */\n    on(event: 'eventCaptured', cb: (...args: any[]) => void): () => void {\n        return this._internalEventEmitter.on(event, cb)\n    }\n\n    /*\n     * Register an event listener that runs when feature flags become available or when they change.\n     * If there are flags, the listener is called immediately in addition to being called on future changes.\n     * Note that this is not called only when we fetch feature flags from the server, but also when they change in the browser.\n     *\n     * ### Usage:\n     *\n     *     posthog.onFeatureFlags(function(featureFlags, featureFlagsVariants, { errorsLoading }) { // do something })\n     *\n     * @param {Function} [callback] The callback function will be called once the feature flags are ready or when they are updated.\n     *                              It'll return a list of feature flags enabled for the user, the variants,\n     *                              and also a context object indicating whether we succeeded to fetch the flags or not.\n     * @returns {Function} A function that can be called to unsubscribe the listener. Used by useEffect when the component unmounts.\n     */\n    onFeatureFlags(callback: FeatureFlagsCallback): () => void {\n        return this.featureFlags.onFeatureFlags(callback)\n    }\n\n    /*\n     * Register an event listener that runs whenever the session id or window id change.\n     * If there is already a session id, the listener is called immediately in addition to being called on future changes.\n     *\n     * Can be used, for example, to sync the PostHog session id with a backend session.\n     *\n     * ### Usage:\n     *\n     *     posthog.onSessionId(function(sessionId, windowId) { // do something })\n     *\n     * @param {Function} [callback] The callback function will be called once a session id is present or when it or the window id are updated.\n     * @returns {Function} A function that can be called to unsubscribe the listener. E.g. Used by useEffect when the component unmounts.\n     */\n    onSessionId(callback: SessionIdChangedCallback): () => void {\n        return this.sessionManager?.onSessionId(callback) ?? (() => {})\n    }\n\n    /** Get list of all surveys. */\n    getSurveys(callback: SurveyCallback, forceReload = false): void {\n        this.surveys.getSurveys(callback, forceReload)\n    }\n\n    /** Get surveys that should be enabled for the current user. */\n    getActiveMatchingSurveys(callback: SurveyCallback, forceReload = false): void {\n        this.surveys.getActiveMatchingSurveys(callback, forceReload)\n    }\n\n    /** Render a survey on a specific element. */\n    renderSurvey(surveyId: string, selector: string): void {\n        this.surveys.renderSurvey(surveyId, selector)\n    }\n\n    /** Checks the feature flags associated with this Survey to see if the survey can be rendered. */\n    canRenderSurvey(surveyId: string): void {\n        this.surveys.canRenderSurvey(surveyId)\n    }\n\n    /**\n     * Identify a user with a unique ID instead of a PostHog\n     * randomly generated distinct_id. If the method is never called,\n     * then unique visitors will be identified by a UUID that is generated\n     * the first time they visit the site.\n     *\n     * If user properties are passed, they are also sent to posthog.\n     *\n     * ### Usage:\n     *\n     *      posthog.identify('[user unique id]')\n     *      posthog.identify('[user unique id]', { email: 'john@example.com' })\n     *      posthog.identify('[user unique id]', {}, { referral_code: '12345' })\n     *\n     * ### Notes:\n     *\n     * You can call this function to overwrite a previously set\n     * unique ID for the current user.\n     *\n     * If the user has been identified ($user_state in persistence is set to 'identified'),\n     * then capture of $identify is skipped to avoid merging users. For example,\n     * if your system allows an admin user to impersonate another user.\n     *\n     * Then a single browser instance can have:\n     *\n     *  `identify('a') -> capture(1) -> identify('b') -> capture(2)`\n     *\n     * and capture 1 and capture 2 will have the correct distinct_id.\n     * but users a and b will NOT be merged in posthog.\n     *\n     * However, if reset is called then:\n     *\n     *  `identify('a') -> capture(1) -> reset() -> capture(2) -> identify('b') -> capture(3)`\n     *\n     * users a and b are not merged.\n     * Capture 1 is associated with user a.\n     * A new distinct id is generated for capture 2.\n     * which is merged with user b.\n     * So, capture 2 and 3 are associated with user b.\n     *\n     * If you want to merge two identified users, you can call posthog.alias\n     *\n     * @param {String} [new_distinct_id] A string that uniquely identifies a user. If not provided, the distinct_id currently in the persistent store (cookie or localStorage) will be used.\n     * @param {Object} [userPropertiesToSet] Optional: An associative array of properties to store about the user. Note: For feature flag evaluations, if the same key is present in the userPropertiesToSetOnce,\n     *  it will be overwritten by the value in userPropertiesToSet.\n     * @param {Object} [userPropertiesToSetOnce] Optional: An associative array of properties to store about the user. If property is previously set, this does not override that value.\n     */\n    identify(new_distinct_id?: string, userPropertiesToSet?: Properties, userPropertiesToSetOnce?: Properties): void {\n        if (!this.__loaded || !this.persistence) {\n            return logger.uninitializedWarning('posthog.identify')\n        }\n        if (isNumber(new_distinct_id)) {\n            new_distinct_id = (new_distinct_id as number).toString()\n            logger.warn(\n                'The first argument to posthog.identify was a number, but it should be a string. It has been converted to a string.'\n            )\n        }\n\n        //if the new_distinct_id has not been set ignore the identify event\n        if (!new_distinct_id) {\n            logger.error('Unique user id has not been set in posthog.identify')\n            return\n        }\n\n        if (isDistinctIdStringLike(new_distinct_id)) {\n            logger.critical(\n                `The string \"${new_distinct_id}\" was set in posthog.identify which indicates an error. This ID should be unique to the user and not a hardcoded string.`\n            )\n            return\n        }\n\n        if (!this._requirePersonProcessing('posthog.identify')) {\n            return\n        }\n\n        const previous_distinct_id = this.get_distinct_id()\n        this.register({ $user_id: new_distinct_id })\n\n        if (!this.get_property('$device_id')) {\n            // The persisted distinct id might not actually be a device id at all\n            // it might be a distinct id of the user from before\n            const device_id = previous_distinct_id\n            this.register_once(\n                {\n                    $had_persisted_distinct_id: true,\n                    $device_id: device_id,\n                },\n                ''\n            )\n        }\n\n        // if the previous distinct id had an alias stored, then we clear it\n        if (new_distinct_id !== previous_distinct_id && new_distinct_id !== this.get_property(ALIAS_ID_KEY)) {\n            this.unregister(ALIAS_ID_KEY)\n            this.register({ distinct_id: new_distinct_id })\n        }\n\n        const isKnownAnonymous = (this.persistence.get_property(USER_STATE) || 'anonymous') === 'anonymous'\n\n        // send an $identify event any time the distinct_id is changing and the old ID is an anonymous ID\n        // - logic on the server will determine whether or not to do anything with it.\n        if (new_distinct_id !== previous_distinct_id && isKnownAnonymous) {\n            this.persistence.set_property(USER_STATE, 'identified')\n\n            // Update current user properties\n            this.setPersonPropertiesForFlags(\n                { ...(userPropertiesToSetOnce || {}), ...(userPropertiesToSet || {}) },\n                false\n            )\n\n            this.capture(\n                '$identify',\n                {\n                    distinct_id: new_distinct_id,\n                    $anon_distinct_id: previous_distinct_id,\n                },\n                { $set: userPropertiesToSet || {}, $set_once: userPropertiesToSetOnce || {} }\n            )\n            // let the reload feature flag request know to send this previous distinct id\n            // for flag consistency\n            this.featureFlags.setAnonymousDistinctId(previous_distinct_id)\n\n            this._cachedIdentify = getIdentifyHash(new_distinct_id, userPropertiesToSet, userPropertiesToSetOnce)\n        } else if (userPropertiesToSet || userPropertiesToSetOnce) {\n            // If the distinct_id is not changing, but we have user properties to set, we can check if they have changed\n            // and if so, send a $set event\n\n            if (\n                this._cachedIdentify !== getIdentifyHash(new_distinct_id, userPropertiesToSet, userPropertiesToSetOnce)\n            ) {\n                this.setPersonProperties(userPropertiesToSet, userPropertiesToSetOnce)\n\n                this._cachedIdentify = getIdentifyHash(new_distinct_id, userPropertiesToSet, userPropertiesToSetOnce)\n            } else {\n                logger.info('A duplicate posthog.identify call was made with the same properties. It has been ignored.')\n            }\n        }\n\n        // Reload active feature flags if the user identity changes.\n        // Note we don't reload this on property changes as these get processed async\n        if (new_distinct_id !== previous_distinct_id) {\n            this.reloadFeatureFlags()\n            // also clear any stored flag calls\n            this.unregister(FLAG_CALL_REPORTED)\n        }\n    }\n\n    /**\n     * Sets properties for the Person associated with the current distinct_id. If config.person_profiles is set to\n     * identified_only, and a Person profile has not been created yet, this will create one.\n     *\n     *\n     * @param {Object} [userPropertiesToSet] Optional: An associative array of properties to store about the user. Note: For feature flag evaluations, if the same key is present in the userPropertiesToSetOnce,\n     *  it will be overwritten by the value in userPropertiesToSet.\n     * @param {Object} [userPropertiesToSetOnce] Optional: An associative array of properties to store about the user. If property is previously set, this does not override that value.\n     */\n    setPersonProperties(userPropertiesToSet?: Properties, userPropertiesToSetOnce?: Properties): void {\n        if (!userPropertiesToSet && !userPropertiesToSetOnce) {\n            return\n        }\n\n        if (!this._requirePersonProcessing('posthog.setPersonProperties')) {\n            return\n        }\n\n        // Update current user properties\n        this.setPersonPropertiesForFlags({ ...(userPropertiesToSetOnce || {}), ...(userPropertiesToSet || {}) })\n\n        // if exactly this $set call has been sent before, don't send it again - determine based on hash of properties\n\n        this.capture('$set', { $set: userPropertiesToSet || {}, $set_once: userPropertiesToSetOnce || {} })\n    }\n\n    /**\n     * Sets group analytics information for subsequent events and reloads feature flags.\n     *\n     * @param {String} groupType Group type (example: 'organization')\n     * @param {String} groupKey Group key (example: 'org::5')\n     * @param {Object} groupPropertiesToSet Optional properties to set for group\n     */\n    group(groupType: string, groupKey: string, groupPropertiesToSet?: Properties): void {\n        if (!groupType || !groupKey) {\n            logger.error('posthog.group requires a group type and group key')\n            return\n        }\n\n        if (!this._requirePersonProcessing('posthog.group')) {\n            return\n        }\n\n        const existingGroups = this.getGroups()\n\n        // if group key changes, remove stored group properties\n        if (existingGroups[groupType] !== groupKey) {\n            this.resetGroupPropertiesForFlags(groupType)\n        }\n\n        this.register({ $groups: { ...existingGroups, [groupType]: groupKey } })\n\n        if (groupPropertiesToSet) {\n            this.capture('$groupidentify', {\n                $group_type: groupType,\n                $group_key: groupKey,\n                $group_set: groupPropertiesToSet,\n            })\n            this.setGroupPropertiesForFlags({ [groupType]: groupPropertiesToSet })\n        }\n\n        // If groups change and no properties change, reload feature flags.\n        // The property change reload case is handled in setGroupPropertiesForFlags.\n        if (existingGroups[groupType] !== groupKey && !groupPropertiesToSet) {\n            this.reloadFeatureFlags()\n        }\n    }\n\n    /**\n     * Resets only the group properties of the user currently logged in.\n     */\n    resetGroups(): void {\n        this.register({ $groups: {} })\n        this.resetGroupPropertiesForFlags()\n\n        // If groups changed, reload feature flags.\n        this.reloadFeatureFlags()\n    }\n\n    /**\n     * Set override person properties for feature flags.\n     * This is used when dealing with new persons / where you don't want to wait for ingestion\n     * to update user properties.\n     */\n    setPersonPropertiesForFlags(properties: Properties, reloadFeatureFlags = true): void {\n        this.featureFlags.setPersonPropertiesForFlags(properties, reloadFeatureFlags)\n    }\n\n    resetPersonPropertiesForFlags(): void {\n        this.featureFlags.resetPersonPropertiesForFlags()\n    }\n\n    /**\n     * Set override group properties for feature flags.\n     * This is used when dealing with new groups / where you don't want to wait for ingestion\n     * to update properties.\n     * Takes in an object, the key of which is the group type.\n     * For example:\n     *     setGroupPropertiesForFlags({'organization': { name: 'CYZ', employees: '11' } })\n     */\n    setGroupPropertiesForFlags(properties: { [type: string]: Properties }, reloadFeatureFlags = true): void {\n        if (!this._requirePersonProcessing('posthog.setGroupPropertiesForFlags')) {\n            return\n        }\n        this.featureFlags.setGroupPropertiesForFlags(properties, reloadFeatureFlags)\n    }\n\n    resetGroupPropertiesForFlags(group_type?: string): void {\n        this.featureFlags.resetGroupPropertiesForFlags(group_type)\n    }\n\n    /**\n     * NB reset is normally only called when a user logs out\n     * calling reset at the wrong time can lead to unexpected results\n     * like split sessions\n     *\n     * Resets all info.\n     * For example: session id, super properties,  sets a random distinct_id and more.\n     */\n    reset(reset_device_id?: boolean): void {\n        logger.info('reset')\n        if (!this.__loaded) {\n            return logger.uninitializedWarning('posthog.reset')\n        }\n        const device_id = this.get_property('$device_id')\n        this.consent.reset()\n        this.persistence?.clear()\n        this.sessionPersistence?.clear()\n        this.surveys.reset()\n        this.persistence?.set_property(USER_STATE, 'anonymous')\n        this.sessionManager?.resetSessionId()\n        this._cachedIdentify = null\n        if (this.config.__preview_experimental_cookieless_mode) {\n            this.register_once(\n                {\n                    distinct_id: COOKIELESS_SENTINEL_VALUE,\n                    $device_id: null,\n                },\n                ''\n            )\n        } else {\n            const uuid = this.config.get_device_id(uuidv7())\n            this.register_once(\n                {\n                    distinct_id: uuid,\n                    $device_id: reset_device_id ? uuid : device_id,\n                },\n                ''\n            )\n        }\n\n        this.register(\n            {\n                $last_posthog_reset: new Date().toISOString(),\n            },\n            1\n        )\n    }\n\n    /**\n     * Returns the current distinct id of the user. This is either the id automatically\n     * generated by the library or the id that has been passed by a call to identify().\n     *\n     * ### Notes:\n     *\n     * get_distinct_id() can only be called after the PostHog library has finished loading.\n     * init() has a loaded function available to handle this automatically. For example:\n     *\n     *     // set distinct_id after the posthog library has loaded\n     *     posthog.init('YOUR PROJECT TOKEN', {\n     *         loaded: function(posthog) {\n     *             distinct_id = posthog.get_distinct_id();\n     *         }\n     *     });\n     */\n    get_distinct_id(): string {\n        return this.get_property('distinct_id')\n    }\n\n    getGroups(): Record<string, any> {\n        return this.get_property('$groups') || {}\n    }\n\n    /**\n     * Returns the current session_id.\n     *\n     * NOTE: This should only be used for informative purposes.\n     * Any actual internal use case for the session_id should be handled by the sessionManager.\n     */\n\n    get_session_id(): string {\n        return this.sessionManager?.checkAndGetSessionAndWindowId(true).sessionId ?? ''\n    }\n\n    /**\n     * Returns the Replay url for the current session.\n     *\n     * @param options Options for the url\n     * @param options.withTimestamp Whether to include the timestamp in the url (defaults to false)\n     * @param options.timestampLookBack How many seconds to look back for the timestamp (defaults to 10)\n     */\n    get_session_replay_url(options?: { withTimestamp?: boolean; timestampLookBack?: number }): string {\n        if (!this.sessionManager) {\n            return ''\n        }\n        const { sessionId, sessionStartTimestamp } = this.sessionManager.checkAndGetSessionAndWindowId(true)\n        let url = this.requestRouter.endpointFor('ui', `/project/${this.config.token}/replay/${sessionId}`)\n        if (options?.withTimestamp && sessionStartTimestamp) {\n            const LOOK_BACK = options.timestampLookBack ?? 10\n            if (!sessionStartTimestamp) {\n                return url\n            }\n            const recordingStartTime = Math.max(\n                Math.floor((new Date().getTime() - sessionStartTimestamp) / 1000) - LOOK_BACK,\n                0\n            )\n            url += `?t=${recordingStartTime}`\n        }\n\n        return url\n    }\n\n    /**\n     * Create an alias, which PostHog will use to link two distinct_ids going forward (not retroactively).\n     * Multiple aliases can map to the same original ID, but not vice-versa. Aliases can also be chained - the\n     * following is a valid scenario:\n     *\n     *     posthog.alias('new_id', 'existing_id');\n     *     ...\n     *     posthog.alias('newer_id', 'new_id');\n     *\n     * If the original ID is not passed in, we will use the current distinct_id - probably the auto-generated GUID.\n     *\n     * ### Notes:\n     *\n     * The best practice is to call alias() when a unique ID is first created for a user\n     * (e.g., when a user first registers for an account and provides an email address).\n     * alias() should never be called more than once for a given user, except to\n     * chain a newer ID to a previously new ID, as described above.\n     *\n     * @param {String} alias A unique identifier that you want to use for this user in the future.\n     * @param {String} [original] The current identifier being used for this user.\n     */\n    alias(alias: string, original?: string): CaptureResult | void | number {\n        // If the $people_distinct_id key exists in persistence, there has been a previous\n        // posthog.people.identify() call made for this user. It is VERY BAD to make an alias with\n        // this ID, as it will duplicate users.\n        if (alias === this.get_property(PEOPLE_DISTINCT_ID_KEY)) {\n            logger.critical('Attempting to create alias for existing People user - aborting.')\n            return -2\n        }\n        if (!this._requirePersonProcessing('posthog.alias')) {\n            return\n        }\n\n        if (isUndefined(original)) {\n            original = this.get_distinct_id()\n        }\n        if (alias !== original) {\n            this._register_single(ALIAS_ID_KEY, alias)\n            return this.capture('$create_alias', { alias: alias, distinct_id: original })\n        } else {\n            logger.warn('alias matches current distinct_id - skipping api call.')\n            this.identify(alias)\n            return -1\n        }\n    }\n\n    /**\n     * Update the configuration of a posthog library instance.\n     *\n     * @param {Partial<PostHogConfig>} config A dictionary of new configuration values to update\n     */\n    set_config(config: Partial<PostHogConfig>): void {\n        const oldConfig = { ...this.config }\n        if (isObject(config)) {\n            extend(this.config, configRenames(config))\n\n            this.persistence?.update_config(this.config, oldConfig)\n            this.sessionPersistence =\n                this.config.persistence === 'sessionStorage' || this.config.persistence === 'memory'\n                    ? this.persistence\n                    : new PostHogPersistence({ ...this.config, persistence: 'sessionStorage' })\n\n            if (localStore.is_supported() && localStore.get('ph_debug') === 'true') {\n                this.config.debug = true\n            }\n            if (this.config.debug) {\n                Config.DEBUG = true\n                logger.info('set_config', {\n                    config,\n                    oldConfig,\n                    newConfig: { ...this.config },\n                })\n            }\n\n            this.sessionRecording?.startIfEnabledOrStop()\n            this.autocapture?.startIfEnabled()\n            this.heatmaps?.startIfEnabled()\n            this.surveys.loadIfEnabled()\n            this._sync_opt_out_with_persistence()\n        }\n    }\n\n    /**\n     * turns session recording on, and updates the config option `disable_session_recording` to false\n     * @param override.sampling - optional boolean to override the default sampling behavior - ensures the next session recording to start will not be skipped by sampling config.\n     * @param override.linked_flag - optional boolean to override the default linked_flag behavior - ensures the next session recording to start will not be skipped by linked_flag config.\n     * @param override.url_trigger - optional boolean to override the default url_trigger behavior - ensures the next session recording to start will not be skipped by url_trigger config.\n     * @param override.event_trigger - optional boolean to override the default event_trigger behavior - ensures the next session recording to start will not be skipped by event_trigger config.\n     * @param override - optional boolean to override the default sampling behavior - ensures the next session recording to start will not be skipped by sampling or linked_flag config. `true` is shorthand for { sampling: true, linked_flag: true }\n     */\n    startSessionRecording(\n        override?: { sampling?: boolean; linked_flag?: boolean; url_trigger?: true; event_trigger?: true } | true\n    ): void {\n        const overrideAll = override === true\n        const overrideConfig = {\n            sampling: overrideAll || !!override?.sampling,\n            linked_flag: overrideAll || !!override?.linked_flag,\n            url_trigger: overrideAll || !!override?.url_trigger,\n            event_trigger: overrideAll || !!override?.event_trigger,\n        }\n\n        if (Object.values(overrideConfig).some(Boolean)) {\n            // allow the session id check to rotate session id if necessary\n            this.sessionManager?.checkAndGetSessionAndWindowId()\n\n            if (overrideConfig.sampling) {\n                this.sessionRecording?.overrideSampling()\n            }\n\n            if (overrideConfig.linked_flag) {\n                this.sessionRecording?.overrideLinkedFlag()\n            }\n\n            if (overrideConfig.url_trigger) {\n                this.sessionRecording?.overrideTrigger('url')\n            }\n\n            if (overrideConfig.event_trigger) {\n                this.sessionRecording?.overrideTrigger('event')\n            }\n        }\n\n        this.set_config({ disable_session_recording: false })\n    }\n\n    /**\n     * turns session recording off, and updates the config option\n     * disable_session_recording to true\n     */\n    stopSessionRecording(): void {\n        this.set_config({ disable_session_recording: true })\n    }\n\n    /**\n     * returns a boolean indicating whether session recording\n     * is currently running\n     */\n    sessionRecordingStarted(): boolean {\n        return !!this.sessionRecording?.started\n    }\n\n    /** Capture a caught exception manually */\n    captureException(error: unknown, additionalProperties?: Properties): void {\n        const syntheticException = new Error('PostHog syntheticException')\n        const properties: Properties = isFunction(assignableWindow.__PosthogExtensions__?.parseErrorAsProperties)\n            ? {\n                  ...assignableWindow.__PosthogExtensions__.parseErrorAsProperties(\n                      isError(error) ? { error, event: error.message } : { event: error as Event | string },\n                      // create synthetic error to get stack in cases where user input does not contain one\n                      // creating the exceptions soon into our code as possible means we should only have to\n                      // remove a single frame (this 'captureException' method) from the resultant stack\n                      { syntheticException }\n                  ),\n                  ...additionalProperties,\n              }\n            : {\n                  $exception_level: 'error',\n                  $exception_list: [\n                      {\n                          type: isError(error) ? error.name : 'Error',\n                          value: isError(error)\n                              ? error.message\n                              : isObject(error) && 'message' in error\n                                ? String(error.message)\n                                : String(error),\n                          mechanism: {\n                              handled: true,\n                              synthetic: false,\n                          },\n                      },\n                  ],\n                  ...additionalProperties,\n              }\n\n        this.exceptions.sendExceptionEvent(properties)\n    }\n\n    /**\n     * returns a boolean indicating whether the toolbar loaded\n     * @param toolbarParams\n     */\n\n    loadToolbar(params: ToolbarParams): boolean {\n        return this.toolbar.loadToolbar(params)\n    }\n\n    /**\n     * Returns the value of the super property named property_name. If no such\n     * property is set, get_property() will return the undefined value.\n     *\n     * ### Notes:\n     *\n     * get_property() can only be called after the PostHog library has finished loading.\n     * init() has a loaded function available to handle this automatically. For example:\n     *\n     *     // grab value for '$user_id' after the posthog library has loaded\n     *     posthog.init('YOUR PROJECT TOKEN', {\n     *         loaded: function(posthog) {\n     *             user_id = posthog.get_property('$user_id');\n     *         }\n     *     });\n     *\n     * @param {String} property_name The name of the super property you want to retrieve\n     */\n    get_property(property_name: string): Property | undefined {\n        return this.persistence?.props[property_name]\n    }\n\n    /**\n     * Returns the value of the session super property named property_name. If no such\n     * property is set, getSessionProperty() will return the undefined value.\n     *\n     * ### Notes:\n     *\n     * This is based on browser-level `sessionStorage`, NOT the PostHog session.\n     * getSessionProperty() can only be called after the PostHog library has finished loading.\n     * init() has a loaded function available to handle this automatically. For example:\n     *\n     *     // grab value for 'user_id' after the posthog library has loaded\n     *     posthog.init('YOUR PROJECT TOKEN', {\n     *         loaded: function(posthog) {\n     *             user_id = posthog.getSessionProperty('user_id');\n     *         }\n     *     });\n     *\n     * @param {String} property_name The name of the session super property you want to retrieve\n     */\n    getSessionProperty(property_name: string): Property | undefined {\n        return this.sessionPersistence?.props[property_name]\n    }\n\n    toString(): string {\n        let name = this.config.name ?? PRIMARY_INSTANCE_NAME\n        if (name !== PRIMARY_INSTANCE_NAME) {\n            name = PRIMARY_INSTANCE_NAME + '.' + name\n        }\n        return name\n    }\n\n    _isIdentified(): boolean {\n        return (\n            this.persistence?.get_property(USER_STATE) === 'identified' ||\n            this.sessionPersistence?.get_property(USER_STATE) === 'identified'\n        )\n    }\n\n    _hasPersonProcessing(): boolean {\n        return !(\n            this.config.person_profiles === 'never' ||\n            (this.config.person_profiles === 'identified_only' &&\n                !this._isIdentified() &&\n                isEmptyObject(this.getGroups()) &&\n                !this.persistence?.props?.[ALIAS_ID_KEY] &&\n                !this.persistence?.props?.[ENABLE_PERSON_PROCESSING])\n        )\n    }\n\n    _shouldCapturePageleave(): boolean {\n        return (\n            this.config.capture_pageleave === true ||\n            (this.config.capture_pageleave === 'if_capture_pageview' && this.config.capture_pageview)\n        )\n    }\n\n    /**\n     *  Creates a person profile for the current user, if they don't already have one and config.person_profiles is set\n     *  to 'identified_only'. Produces a warning and does not create a profile if config.person_profiles is set to\n     *  'never'.\n     */\n    createPersonProfile(): void {\n        if (this._hasPersonProcessing()) {\n            // if a person profile already exists, don't send an event when we don't need to\n            return\n        }\n        if (!this._requirePersonProcessing('posthog.createPersonProfile')) {\n            return\n        }\n        // sent a $set event. We don't set any properties here, but attribution props will be added later\n        this.setPersonProperties({}, {})\n    }\n\n    /**\n     * Enables person processing if possible, returns true if it does so or already enabled, false otherwise\n     *\n     * @param function_name\n     */\n    _requirePersonProcessing(function_name: string): boolean {\n        if (this.config.person_profiles === 'never') {\n            logger.error(\n                function_name + ' was called, but process_person is set to \"never\". This call will be ignored.'\n            )\n            return false\n        }\n        this._register_single(ENABLE_PERSON_PROCESSING, true)\n        return true\n    }\n\n    private _sync_opt_out_with_persistence(): void {\n        const isOptedOut = this.consent.isOptedOut()\n        const defaultPersistenceDisabled = this.config.opt_out_persistence_by_default\n\n        // TRICKY: We want a deterministic state for persistence so that a new pageload has the same persistence\n        const persistenceDisabled = this.config.disable_persistence || (isOptedOut && !!defaultPersistenceDisabled)\n\n        if (this.persistence?.disabled !== persistenceDisabled) {\n            this.persistence?.set_disabled(persistenceDisabled)\n        }\n        if (this.sessionPersistence?.disabled !== persistenceDisabled) {\n            this.sessionPersistence?.set_disabled(persistenceDisabled)\n        }\n    }\n\n    /**\n     * Opt the user in to data capturing and cookies/localstorage for this PostHog instance\n     * If the config.opt_out_persistence_by_default is set to false, the SDK persistence will be enabled.\n     *\n     * ### Usage\n     *\n     *     // opt user in\n     *     posthog.opt_in_capturing();\n     *\n     *     // opt user in with specific event name, properties, cookie configuration\n     *     posthog.opt_in_capturing({\n     *         capture_event_name: 'User opted in',\n     *         capture_event_properties: {\n     *             'email': 'jdoe@example.com'\n     *         }\n     *     });\n     *\n     * @param {Object} [config] A dictionary of config options to override\n     * @param {string} [config.capture_event_name=$opt_in] Event name to be used for capturing the opt-in action. Set to `null` or `false` to skip capturing the optin event\n     * @param {Object} [config.capture_properties] Set of properties to be captured along with the opt-in action\n     */\n    opt_in_capturing(options?: {\n        captureEventName?: EventName | null | false /** event name to be used for capturing the opt-in action */\n        captureProperties?: Properties /** set of properties to be captured along with the opt-in action */\n    }): void {\n        this.consent.optInOut(true)\n        this._sync_opt_out_with_persistence()\n\n        // Don't capture if captureEventName is null or false\n        if (isUndefined(options?.captureEventName) || options?.captureEventName) {\n            this.capture(options?.captureEventName ?? '$opt_in', options?.captureProperties, { send_instantly: true })\n        }\n\n        if (this.config.capture_pageview) {\n            this._captureInitialPageview()\n        }\n    }\n\n    /**\n     * Opt the user out of data capturing and cookies/localstorage for this PostHog instance.\n     * If the config.opt_out_persistence_by_default is set to true, the SDK persistence will be disabled.\n     *\n     */\n    opt_out_capturing(): void {\n        this.consent.optInOut(false)\n        this._sync_opt_out_with_persistence()\n    }\n\n    /**\n     * Check whether the user has opted in to data capturing and cookies/localstorage for this PostHog instance\n     *\n     * @returns {boolean} current opt-in status\n     */\n    has_opted_in_capturing(): boolean {\n        return this.consent.isOptedIn()\n    }\n\n    /**\n     * Check whether the user has opted out of data capturing and cookies/localstorage for this PostHog instance\n     *\n     * @returns {boolean} current opt-out status\n     */\n    has_opted_out_capturing(): boolean {\n        return this.consent.isOptedOut()\n    }\n\n    /**\n     * Clear the user's opt in/out status of data capturing and cookies/localstorage for this PostHog instance\n     */\n    clear_opt_in_out_capturing(): void {\n        this.consent.reset()\n        this._sync_opt_out_with_persistence()\n    }\n\n    _is_bot(): boolean | undefined {\n        if (navigator) {\n            return isLikelyBot(navigator, this.config.custom_blocked_useragents)\n        } else {\n            return undefined\n        }\n    }\n\n    _captureInitialPageview(): void {\n        if (document && !this._initialPageviewCaptured) {\n            this._initialPageviewCaptured = true\n            this.capture('$pageview', { title: document.title }, { send_instantly: true })\n        }\n    }\n\n    /**\n     * Enables or disables debug mode.\n     * You can also enable debug mode by appending `?__posthog_debug=true` to the URL\n     *\n     * @param {boolean} [debug] If true, will enable debug mode.\n     */\n    debug(debug?: boolean): void {\n        if (debug === false) {\n            window?.console.log(\"You've disabled debug mode.\")\n            localStorage && localStorage.removeItem('ph_debug')\n            this.set_config({ debug: false })\n        } else {\n            window?.console.log(\n                \"You're now in debug mode. All calls to PostHog will be logged in your console.\\nYou can disable this with `posthog.debug(false)`.\"\n            )\n            localStorage && localStorage.setItem('ph_debug', 'true')\n            this.set_config({ debug: true })\n        }\n    }\n\n    private _runBeforeSend(data: CaptureResult): CaptureResult | null {\n        if (isNullish(this.config.before_send)) {\n            return data\n        }\n\n        const fns = isArray(this.config.before_send) ? this.config.before_send : [this.config.before_send]\n        let beforeSendResult: CaptureResult | null = data\n        for (const fn of fns) {\n            beforeSendResult = fn(beforeSendResult)\n            if (isNullish(beforeSendResult)) {\n                const logMessage = `Event '${data.event}' was rejected in beforeSend function`\n                if (isKnownUnsafeEditableEvent(data.event)) {\n                    logger.warn(`${logMessage}. This can cause unexpected behavior.`)\n                } else {\n                    logger.info(logMessage)\n                }\n                return null\n            }\n            if (!beforeSendResult.properties || isEmptyObject(beforeSendResult.properties)) {\n                logger.warn(\n                    `Event '${data.event}' has no properties after beforeSend function, this is likely an error.`\n                )\n            }\n        }\n        return beforeSendResult\n    }\n\n    public getPageViewId(): string | undefined {\n        return this.pageViewManager._currentPageview?.pageViewId\n    }\n\n    /**\n     * Capture written user feedback for a LLM trace. Numeric values are converted to strings.\n     * @param traceId The trace ID to capture feedback for.\n     * @param userFeedback The feedback to capture.\n     */\n    captureTraceFeedback(traceId: string | number, userFeedback: string) {\n        this.capture('$ai_feedback', {\n            $ai_trace_id: String(traceId),\n            $ai_feedback_text: userFeedback,\n        })\n    }\n\n    /**\n     * Capture a metric for a LLM trace. Numeric values are converted to strings.\n     * @param traceId The trace ID to capture the metric for.\n     * @param metricName The name of the metric to capture.\n     * @param metricValue The value of the metric to capture.\n     */\n    captureTraceMetric(traceId: string | number, metricName: string, metricValue: string | number | boolean) {\n        this.capture('$ai_metric', {\n            $ai_trace_id: String(traceId),\n            $ai_metric_name: metricName,\n            $ai_metric_value: String(metricValue),\n        })\n    }\n}\n\nsafewrapClass(PostHog, ['identify'])\n\nconst add_dom_loaded_handler = function () {\n    // Cross browser DOM Loaded support\n    function dom_loaded_handler() {\n        // function flag since we only want to execute this once\n        if ((dom_loaded_handler as any).done) {\n            return\n        }\n        ;(dom_loaded_handler as any).done = true\n\n        ENQUEUE_REQUESTS = false\n\n        each(instances, function (inst: PostHog) {\n            inst._dom_loaded()\n        })\n    }\n\n    if (document?.addEventListener) {\n        if (document.readyState === 'complete') {\n            // safari 4 can fire the DOMContentLoaded event before loading all\n            // external JS (including this file). you will see some copypasta\n            // on the internet that checks for 'complete' and 'loaded', but\n            // 'loaded' is an IE thing\n            dom_loaded_handler()\n        } else {\n            addEventListener(document, 'DOMContentLoaded', dom_loaded_handler, { capture: false })\n        }\n\n        return\n    }\n\n    // Only IE6-8 don't support `document.addEventListener` and we don't support them\n    // so let's simply log an error stating PostHog couldn't be initialized\n    // We're checking for `window` to avoid erroring out on a SSR context\n    if (window) {\n        logger.error(\"Browser doesn't support `document.addEventListener` so PostHog couldn't be initialized\")\n    }\n}\n\nexport function init_from_snippet(): void {\n    const posthogMain = (instances[PRIMARY_INSTANCE_NAME] = new PostHog())\n\n    const snippetPostHog = assignableWindow['posthog']\n\n    if (snippetPostHog) {\n        /**\n         * The snippet uses some clever tricks to allow deferred loading of array.js (this code)\n         *\n         * window.posthog is an array which the queue of calls made before the lib is loaded\n         * It has methods attached to it to simulate the posthog object so for instance\n         *\n         * window.posthog.init(\"TOKEN\", {api_host: \"foo\" })\n         * window.posthog.capture(\"my-event\", {foo: \"bar\" })\n         *\n         * ... will mean that window.posthog will look like this:\n         * window.posthog == [\n         *  [\"my-event\", {foo: \"bar\"}]\n         * ]\n         *\n         * window.posthog[_i] == [\n         *   [\"TOKEN\", {api_host: \"foo\" }, \"posthog\"]\n         * ]\n         *\n         * If a name is given to the init function then the same as above is true but as a sub-property on the object:\n         *\n         * window.posthog.init(\"TOKEN\", {}, \"ph2\")\n         * window.posthog.ph2.people.set({foo: \"bar\"})\n         *\n         * window.posthog.ph2 == []\n         * window.posthog.people == [\n         *  [\"set\", {foo: \"bar\"}]\n         * ]\n         *\n         */\n\n        // Call all pre-loaded init calls properly\n\n        each(snippetPostHog['_i'], function (item: [token: string, config: Partial<PostHogConfig>, name: string]) {\n            if (item && isArray(item)) {\n                const instance = posthogMain.init(item[0], item[1], item[2])\n\n                const instanceSnippet = snippetPostHog[item[2]] || snippetPostHog\n\n                if (instance) {\n                    // Crunch through the people queue first - we queue this data up &\n                    // flush on identify, so it's better to do all these operations first\n                    instance._execute_array.call(instance.people, instanceSnippet.people)\n                    instance._execute_array(instanceSnippet)\n                }\n            }\n        })\n    }\n\n    assignableWindow['posthog'] = posthogMain\n\n    add_dom_loaded_handler()\n}\n\nexport function init_as_module(): PostHog {\n    const posthogMain = (instances[PRIMARY_INSTANCE_NAME] = new PostHog())\n\n    add_dom_loaded_handler()\n\n    return posthogMain\n}\n"]}