{"version":3,"file":"before-send.js","sourceRoot":"","sources":["../../../src/customizations/before-send.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAA;AAEpD,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAA;AAChD,OAAO,EAAE,WAAW,EAAE,gBAAgB,EAAE,eAAe,EAAE,MAAM,wBAAwB,CAAA;AAEvF;;;;;;;;;GASG;AACH,MAAM,UAAU,kBAAkB,CAAC,OAAe;IAC9C,OAAO,UAAC,aAAmC;QACvC,IAAI,CAAC,aAAa,EAAE,CAAC;YACjB,OAAO,IAAI,CAAA;QACf,CAAC;QAED,OAAO,gBAAgB,CAAC,aAAa,CAAC,UAAU,CAAC,WAAW,EAAE,OAAO,CAAC;YAClE,CAAC,uBACQ,aAAa,KAChB,UAAU,wBACH,aAAa,CAAC,UAAU,KAC3B,YAAY,EAAE,CAAC,oBAAoB,CAAC,EACpC,iBAAiB,EAAE,OAAO,OAGpC,CAAC,CAAC,IAAI,CAAA;IACd,CAAC,CAAA;AACL,CAAC;AAED;;;;;;;;;GASG;AACH,MAAM,UAAU,iBAAiB,CAAC,OAAe;IAC7C,OAAO,UAAC,aAAmC;QACvC,IAAI,CAAC,aAAa,EAAE,CAAC;YACjB,OAAO,IAAI,CAAA;QACf,CAAC;QAED,OAAO,gBAAgB,CAAC,aAAa,CAAC,UAAU,CAAC,WAAW,EAAE,OAAO,CAAC;YAClE,CAAC,uBACQ,aAAa,KAChB,UAAU,wBACH,aAAa,CAAC,UAAU,KAC3B,YAAY,EAAE,WAAW,CAAC,aAAa,CAAC,UAAU,CAAC,YAAY,EAAE,mBAAmB,CAAC,EACrF,iBAAiB,EAAE,eAAe,CAAC,aAAa,CAAC,UAAU,CAAC,iBAAiB,EAAE,OAAO,CAAC,OAGjG,CAAC,CAAC,IAAI,CAAA;IACd,CAAC,CAAA;AACL,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,aAAa,CAAC,UAA4B,EAAE,OAAe;IACvE,OAAO,UAAC,aAAmC;;QACvC,IAAI,CAAC,aAAa,EAAE,CAAC;YACjB,OAAO,IAAI,CAAA;QACf,CAAC;QAED,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,aAAa,CAAC,KAAK,CAAC,EAAE,CAAC;YAC7C,OAAO,aAAa,CAAA;QACxB,CAAC;QAED,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAA;QAC5B,OAAO,MAAM,GAAG,GAAG,GAAG,YAAY,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC;YACrD,CAAC,uBACQ,aAAa,KAChB,UAAU,wBACH,aAAa,CAAC,UAAU,KAC3B,YAAY,EAAE,WAAW,CAAC,MAAA,aAAa,CAAC,UAAU,0CAAE,YAAY,EAAE,eAAe,CAAC,EAClF,iBAAiB,EAAE,eAAe,CAAC,MAAA,aAAa,CAAC,UAAU,0CAAE,iBAAiB,EAAE,OAAO,CAAC,EACxF,eAAe,EAAE,WAAW,CAAC,MAAA,aAAa,CAAC,UAAU,0CAAE,eAAe,EAAE,UAAU,CAAC,OAG7F,CAAC,CAAC,IAAI,CAAA;IACd,CAAC,CAAA;AACL,CAAC;AAED,MAAM,CAAC,IAAM,sBAAsB,GAAiB,UAAC,MAAM;IACvD,sCAAsC;IACtC,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,MAAM,CAAC,CAAA;IAC7C,OAAO,IAAI,CAAA;AACf,CAAC,CAAA","sourcesContent":["import { clampToRange } from '../utils/number-utils'\nimport { BeforeSendFn, CaptureResult, KnownEventName } from '../types'\nimport { includes } from '../utils/string-utils'\nimport { appendArray, sampleOnProperty, updateThreshold } from '../extensions/sampling'\n\n/**\n * Provides an implementation of sampling that samples based on the distinct ID.\n * Using the provided percentage.\n * Can be used to create a beforeCapture fn for a PostHog instance.\n *\n * Setting 0.5 will cause roughly 50% of distinct ids to have events sent.\n * Not 50% of events for each distinct id.\n *\n * @param percent a number from 0 to 1, 1 means always send and, 0 means never send the event\n */\nexport function sampleByDistinctId(percent: number): BeforeSendFn {\n    return (captureResult: CaptureResult | null): CaptureResult | null => {\n        if (!captureResult) {\n            return null\n        }\n\n        return sampleOnProperty(captureResult.properties.distinct_id, percent)\n            ? {\n                  ...captureResult,\n                  properties: {\n                      ...captureResult.properties,\n                      $sample_type: ['sampleByDistinctId'],\n                      $sample_threshold: percent,\n                  },\n              }\n            : null\n    }\n}\n\n/**\n * Provides an implementation of sampling that samples based on the session ID.\n * Using the provided percentage.\n * Can be used to create a beforeCapture fn for a PostHog instance.\n *\n * Setting 0.5 will cause roughly 50% of sessions to have events sent.\n * Not 50% of events for each session.\n *\n * @param percent a number from 0 to 1, 1 means always send and, 0 means never send the event\n */\nexport function sampleBySessionId(percent: number): BeforeSendFn {\n    return (captureResult: CaptureResult | null): CaptureResult | null => {\n        if (!captureResult) {\n            return null\n        }\n\n        return sampleOnProperty(captureResult.properties.$session_id, percent)\n            ? {\n                  ...captureResult,\n                  properties: {\n                      ...captureResult.properties,\n                      $sample_type: appendArray(captureResult.properties.$sample_type, 'sampleBySessionId'),\n                      $sample_threshold: updateThreshold(captureResult.properties.$sample_threshold, percent),\n                  },\n              }\n            : null\n    }\n}\n\n/**\n * Provides an implementation of sampling that samples based on the event name.\n * Using the provided percentage.\n * Can be used to create a beforeCapture fn for a PostHog instance.\n *\n * @param eventNames an array of event names to sample, sampling is applied across events not per event name\n * @param percent a number from 0 to 1, 1 means always send, 0 means never send the event\n */\nexport function sampleByEvent(eventNames: KnownEventName[], percent: number): BeforeSendFn {\n    return (captureResult: CaptureResult | null): CaptureResult | null => {\n        if (!captureResult) {\n            return null\n        }\n\n        if (!includes(eventNames, captureResult.event)) {\n            return captureResult\n        }\n\n        const number = Math.random()\n        return number * 100 < clampToRange(percent * 100, 0, 100)\n            ? {\n                  ...captureResult,\n                  properties: {\n                      ...captureResult.properties,\n                      $sample_type: appendArray(captureResult.properties?.$sample_type, 'sampleByEvent'),\n                      $sample_threshold: updateThreshold(captureResult.properties?.$sample_threshold, percent),\n                      $sampled_events: appendArray(captureResult.properties?.$sampled_events, eventNames),\n                  },\n              }\n            : null\n    }\n}\n\nexport const printAndDropEverything: BeforeSendFn = (result) => {\n    // eslint-disable-next-line no-console\n    console.log('Would have sent event:', result)\n    return null\n}\n"]}